{
  "name": "C#",
  "scopeName": "source.cs",
  "patterns": [
    {
      "include": "#attribute"
    },
    {
      "include": "#using"
    },
    {
      "include": "#namespace"
    },
    {
      "include": "#code"
    },
    {
      "include": "#method"
    }
  ],
  "repository": {
    "attribute": {
      "name": "meta.annotation.cs",
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        {
          "include": "#constants"
        },
        {
          "include": "#preprocessor"
        },
        {
          "include": "#builtinTypes"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "block": {
      "patterns": [
        {
          "name": "meta.block.cs",
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "include": "#code"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.cs"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.cs"
            }
          }
        }
      ]
    },
    "builtinTypes": {
      "patterns": [
        {
          "name": "storage.value.type.cs",
          "match": "\\b(bool|byte|sbyte|char|decimal|double|enum|float|int|uint|long|ulong|short|ushort)[ ]*(\\?|\\*)?\\b",
          "captures": {
            "2": {
              "name": "punctuation.storage.type.modifier.cs"
            }
          }
        },
        {
          "name": "storage.reference.type.cs",
          "match": "\\b(dynamic|object|string)[ ]*([*])?\\b",
          "captures": {
            "2": {
              "name": "punctuation.storage.type.modifier.cs"
            }
          }
        }
      ]
    },
    "castTypeOperator": {
      "match": "\\((\\w+[?*,\u003c\u003e\\[\\]]*)\\)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      }
    },
    "code": {
      "patterns": [
        {
          "include": "#typeOperator"
        },
        {
          "include": "#block"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#enum-declaration"
        },
        {
          "include": "#type-declaration"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#preprocessor"
        },
        {
          "include": "#method-call"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#builtinTypes"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.documentation.cs",
          "begin": "///",
          "end": "$",
          "patterns": [
            {
              "include": "text.xml"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cs"
            }
          }
        },
        {
          "name": "comment.block.cs",
          "begin": "/\\*",
          "end": "\\*/",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cs"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cs"
            }
          }
        },
        {
          "name": "comment.line.double-slash.cs",
          "begin": "//",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.cs"
            }
          }
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.cs",
          "match": "\\b(true|false|null|this|base)\\b"
        },
        {
          "name": "constant.numeric.cs",
          "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(?i:f|d|m|u|l|ul|lu)?\\b"
        },
        {
          "include": "#string"
        }
      ]
    },
    "enum-declaration": {
      "begin": "(?=(?:public|private|protected|internal)?(.*)?(?:enum)\\s+\\w+)",
      "end": "}",
      "patterns": [
        {
          "name": "storage.modifier.cs",
          "match": "\\b(public|private|protected|internal|static)\\b"
        },
        {
          "include": "#comments"
        },
        {
          "name": "meta.enum.declaration.cs",
          "begin": "(enum)\\s+",
          "end": "(?={)",
          "patterns": [
            {
              "match": "\\b([a-zA-Z]+\\w*)\\b",
              "captures": {
                "1": {
                  "name": "meta.class.enum.identifier.cs"
                }
              }
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.enum.cs"
            }
          }
        },
        {
          "begin": "{",
          "end": "(?=})",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "match": ","
            },
            {
              "include": "#attribute"
            },
            {
              "begin": "\\b([a-zA-Z]+\\w*)\\b\\s*",
              "end": "(?=,|})",
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "begin": "\\s*=\\s*",
                  "end": "(?=,|})",
                  "patterns": [
                    {
                      "include": "#comments"
                    },
                    {
                      "include": "#constants"
                    }
                  ]
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "entity.name.enum.cs"
                }
              }
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.enum.begin.cs"
            }
          }
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.section.enum.end.cs"
        }
      }
    },
    "field-declaration": {
      "patterns": [
        {
          "name": "meta.field.declaration.cs",
          "begin": "(?=(?:(?:(?:private|public|volatile|internal|protected|static|readonly|const|event|extern)\\s*)*)(?:[\\w\\s?*,\u003c\u003e\\[\\]]+?)(?:[\\w]+)\\s*(?:;|=|=\u003e))",
          "end": "(?=;)",
          "patterns": [
            {
              "begin": "(?==\u003e?)",
              "end": "(?=;|$)",
              "patterns": [
                {
                  "include": "#code"
                }
              ]
            },
            {
              "begin": "\\s*=\\s*",
              "end": "(?=;)",
              "patterns": [
                {
                  "include": "#code"
                }
              ]
            },
            {
              "match": "\\s*((?:(?:private|public|volatile|internal|protected|static|readonly|const|event|extern)\\s*)*)\\s*(.+?)\\s*([\\w]+)\\s*(?=;|=)",
              "captures": {
                "1": {
                  "name": "storage.modifier.cs"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#type"
                    }
                  ]
                },
                "3": {
                  "name": "entity.name.variable.cs"
                }
              }
            }
          ]
        }
      ]
    },
    "functionTypeOperator": {
      "match": "\\b(typeof|sizeof)\\s*\\((\\w+[?*,\u003c\u003e\\[\\]]*)\\)",
      "captures": {
        "1": {
          "name": "keyword.operator.cs"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      }
    },
    "generic-constraints": {
      "name": "meta.generic.constraints.cs",
      "begin": "(where)\\s+(\\w+([?*])?)\\s*:",
      "end": "(?=where|{|$)",
      "patterns": [
        {
          "name": "keyword.other.cs",
          "match": "\\b(class|struct)\\b"
        },
        {
          "match": "(new)\\s*\\(\\s*\\)",
          "captures": {
            "1": {
              "name": "keyword.other.cs"
            }
          }
        },
        {
          "include": "#type"
        },
        {
          "include": "#generic-constraints"
        },
        {
          "include": "#comments"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other.cs"
        },
        "2": {
          "name": "meta.generic.type.specifier.cs",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      }
    },
    "keywordTypeOperator": {
      "match": "\\b(is|as|new)\\s+(\\w+[?*,\u003c\u003e\\[\\]]*)",
      "captures": {
        "1": {
          "name": "keyword.operator.cs"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      }
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.cs",
          "match": "\\b(if|else|while|for|foreach|in|do|return|continue|break|switch|case|default|goto|throw|try|catch|finally|lock|yield|await|when)\\b"
        },
        {
          "name": "keyword.linq.cs",
          "match": "\\b(from|where|select|group|into|orderby|join|let|on|equals|by|ascending|descending)\\b"
        },
        {
          "name": "keyword.operator.cs",
          "match": "\\b(using|checked|unchecked|override|readonly|stackalloc|nameof)\\b"
        },
        {
          "name": "keyword.other.cs",
          "match": "\\b(event|delegate|fixed|add|remove|set|get|value|alias|global|extern)\\b"
        }
      ]
    },
    "method": {
      "patterns": [
        {
          "name": "meta.new-object.cs",
          "begin": "(?=\\bnew\\s+)(?=[\\w\u003c].*\\s+)(?=[^=]+\\()",
          "end": "(?={|;)",
          "patterns": [
            {
              "include": "#code"
            }
          ]
        },
        {
          "name": "storage.modifier.cs",
          "match": "\\b(internal|public|protected|private|static|new|abstract|virtual|override|implicit|explicit|operator|async|partial)\\b"
        },
        {
          "name": "meta.method.cs",
          "begin": "(void|[\\w\u003c\u003e.?*\\[\\],]+)\\s*(?=.*)",
          "end": "[};]",
          "patterns": [
            {
              "name": "meta.method.identifier.cs",
              "begin": "([\\w]+)\\s*(\u003c[\\w\u003c\u003e\\s,`?]*\u003e)?\\s*(\\()",
              "end": "\\)",
              "patterns": [
                {
                  "include": "#attribute"
                },
                {
                  "include": "#parameters"
                },
                {
                  "include": "#constants"
                },
                {
                  "include": "#comments"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "entity.name.function.declaration.cs"
                },
                "2": {
                  "name": "meta.generic.method.identifier",
                  "patterns": [
                    {
                      "match": ","
                    },
                    {
                      "match": "(\\w+)",
                      "captures": {
                        "1": {
                          "name": "meta.generic.type.specifier.cs",
                          "patterns": [
                            {
                              "include": "#type"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "3": {
                  "name": "punctuation.definition.method-parameters.begin.cs"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.method-parameters.end.cs"
                }
              }
            },
            {
              "include": "#generic-constraints"
            },
            {
              "name": "meta.method.base-call.cs",
              "begin": ":\\s*(this|base)\\s*\\(",
              "end": "\\)",
              "patterns": [
                {
                  "include": "#builtinTypes"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "constant.language.cs"
                }
              }
            },
            {
              "include": "#comments"
            },
            {
              "name": "meta.method.body.cs",
              "begin": "{",
              "end": "(?=})",
              "patterns": [
                {
                  "include": "#code"
                }
              ],
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.method.begin.cs"
                }
              }
            },
            {
              "name": "meta.method.body.cs",
              "begin": "=\u003e",
              "end": "(?=;)",
              "patterns": [
                {
                  "include": "#code"
                }
              ],
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.method.begin.cs"
                }
              }
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "meta.method.return-type.cs",
              "patterns": [
                {
                  "include": "#returnType"
                }
              ]
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.section.method.end.cs"
            }
          }
        }
      ]
    },
    "method-call": {
      "name": "meta.method-call.cs",
      "begin": "([\\w$]+)\\s*(\\()",
      "end": "\\)",
      "patterns": [
        {
          "name": "punctuation.definition.separator.parameter.cs",
          "match": ","
        },
        {
          "include": "#code"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "meta.method.cs"
        },
        "2": {
          "name": "punctuation.definition.method-parameters.begin.cs"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.method-parameters.end.cs"
        }
      }
    },
    "namespace": {
      "begin": "\\s*[^@]?((namespace)\\s+([\\w.]+))",
      "end": "}",
      "patterns": [
        {
          "begin": "{",
          "end": "(?=})",
          "patterns": [
            {
              "include": "#using"
            },
            {
              "include": "#namespace"
            },
            {
              "include": "#code"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.namespace.begin.cs"
            }
          }
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "meta.namespace.identifier.cs"
        },
        "2": {
          "name": "keyword.other.namespace.cs"
        },
        "3": {
          "name": "entity.name.type.namespace.cs"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.namespace.end.cs"
        }
      }
    },
    "parameters": {
      "name": "meta.parameters.cs",
      "begin": "\\b(ref|params|out)?\\s*\\b(\\w+(?:\\s*\u003c.*?\u003e)?(?:\\s*\\*)*(?:\\s*\\?)?(?:\\s*\\[.*?\\])?)\\s+(@?\\w+)\\s*(=)?",
      "end": "(?:(,)|(?=[\\)]))",
      "patterns": [
        {
          "include": "#constants"
        },
        {
          "include": "#block"
        },
        {
          "include": "#builtinTypes"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.cs"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "3": {
          "name": "variable.parameter.function.cs"
        },
        "4": {
          "name": "keyword.operator.assignment.cs"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.separator.parameter.cs"
        }
      }
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.cs",
          "match": "^\\s*(#\\s*(if|else|elif|endif|define|undef|warning|error|line|pragma|region|endregion))\\b\\s*(.*?)(?=$|\\/\\/)",
          "captures": {
            "1": {
              "name": "meta.directive.preprocessor.cs"
            },
            "3": {
              "name": "entity.name.preprocessor.cs"
            }
          }
        }
      ]
    },
    "property-declaration": {
      "name": "meta.property.cs",
      "begin": "\\s*(?!.*\\b(?:class|interface|struct)\\b)((?:\\w+\\s+)*?)(?!(?:private|public|internal|protected|static|new|virtual|override))(\\w.+?)\\s+(\\w+)\\s*(?={|$)",
      "end": "}|;|$",
      "patterns": [
        {
          "include": "#block"
        },
        {
          "begin": "=",
          "end": "(?=;)",
          "patterns": [
            {
              "include": "#code"
            }
          ]
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.cs",
          "match": "\\b(private|public|internal|protected|static|new|virtual|override)\\b"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "3": {
          "name": "entity.name.function.cs"
        }
      }
    },
    "returnType": {
      "patterns": [
        {
          "name": "storage.type.cs",
          "match": "void"
        },
        {
          "include": "#type"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "include": "#string-interpolated-verbatim"
        },
        {
          "include": "#string-interpolated"
        },
        {
          "name": "string.quoted.double.literal.cs",
          "match": "@\"([^\"]|\"\")*\"",
          "captures": {
            "0": {
              "name": "punctuation.definition.string.begin.cs"
            }
          }
        },
        {
          "name": "string.quoted.double.cs",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.cs",
              "match": "\\\\."
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cs"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cs"
            }
          }
        },
        {
          "name": "string.quoted.single.cs",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.cs",
              "match": "\\\\."
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cs"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cs"
            }
          }
        }
      ]
    },
    "string-interpolated": {
      "patterns": [
        {
          "begin": "\\$\"",
          "end": "\"|$",
          "patterns": [
            {
              "begin": "([^{}]+?)(?={|\"|$)",
              "end": "(?={|\"|$)",
              "beginCaptures": {
                "1": {
                  "name": "string.quoted.double.cs"
                }
              }
            },
            {
              "name": "meta.interpolated.expression.cs",
              "begin": "{",
              "end": "}",
              "patterns": [
                {
                  "include": "#code"
                }
              ]
            },
            {
              "begin": "([^{}]+?)(?={|\"|$)",
              "end": "(?={|\"|$)",
              "beginCaptures": {
                "1": {
                  "name": "string.quoted.double.cs"
                }
              }
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cs"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cs"
            }
          }
        }
      ]
    },
    "string-interpolated-verbatim": {
      "patterns": [
        {
          "begin": "\\$@\"",
          "end": "\"",
          "patterns": [
            {
              "begin": "([^{}]+?)(?={|\"|$)",
              "end": "(?={|\"|$)",
              "beginCaptures": {
                "1": {
                  "name": "string.quoted.double.literal.cs"
                }
              }
            },
            {
              "name": "meta.interpolated.expression.cs",
              "begin": "{",
              "end": "}",
              "patterns": [
                {
                  "include": "#code"
                }
              ]
            },
            {
              "begin": "([^{}]+?)(?={|\"|$)",
              "end": "(?={|\"|$)",
              "beginCaptures": {
                "1": {
                  "name": "string.quoted.double.literal.cs"
                }
              }
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cs"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cs"
            }
          }
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "include": "#builtinTypes"
        },
        {
          "include": "#typeName"
        }
      ]
    },
    "type-body": {
      "patterns": [
        {
          "include": "#attribute"
        },
        {
          "include": "#enum-declaration"
        },
        {
          "include": "#type-declaration"
        },
        {
          "include": "#field-declaration"
        },
        {
          "include": "#property-declaration"
        },
        {
          "include": "#method"
        },
        {
          "include": "#code"
        }
      ]
    },
    "type-declaration": {
      "begin": "(?=(?:public|private|protected|internal|static|partial|abstract|sealed|new)?(.*)?(?:class|struct|interface)\\s+\\w+)",
      "end": "}",
      "patterns": [
        {
          "name": "storage.modifier.cs",
          "match": "\\b(public|private|protected|internal|static|partial|abstract|sealed|new)\\b"
        },
        {
          "include": "#comments"
        },
        {
          "name": "meta.type.declaration.cs",
          "begin": "(class|struct|interface)\\s+",
          "end": "(?={|:|$|where)",
          "patterns": [
            {
              "include": "#typeName"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.class.cs"
            }
          }
        },
        {
          "begin": ":",
          "end": "(?={|where)",
          "patterns": [
            {
              "include": "#typeName"
            },
            {
              "match": "([\\w\u003c\u003e]+)\\s*",
              "captures": {
                "1": {
                  "name": "storage.type.cs"
                }
              }
            },
            {
              "include": "#comments"
            }
          ]
        },
        {
          "include": "#generic-constraints"
        },
        {
          "begin": "{",
          "end": "(?=})",
          "patterns": [
            {
              "include": "#type-body"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.class.begin.cs"
            }
          }
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.section.class.end.cs"
        }
      }
    },
    "typeName": {
      "patterns": [
        {
          "begin": "\\b([a-zA-Z]+[\\w\\.]*)\\s*\u003c",
          "end": "\u003e",
          "patterns": [
            {
              "match": ","
            },
            {
              "match": "(\\w+([?*])?)",
              "captures": {
                "1": {
                  "name": "meta.generic.type.specifier.cs",
                  "patterns": [
                    {
                      "include": "#type"
                    }
                  ]
                }
              }
            }
          ],
          "captures": {
            "1": {
              "name": "entity.name.generic.class.cs"
            }
          }
        },
        {
          "match": "\\b(I[A-Z]+[\\w\\.]*)\\s*(?:\\s*\\[\\s*\\])?\\*?\\b",
          "captures": {
            "1": {
              "name": "entity.name.interface.class.cs"
            }
          }
        },
        {
          "match": "\\b([a-zA-Z]+[\\w\\.]*)\\s*(?:\\s*\\[\\s*\\])?\\*?\\b",
          "captures": {
            "1": {
              "name": "entity.name.class.cs"
            }
          }
        }
      ]
    },
    "typeOperator": {
      "patterns": [
        {
          "include": "#keywordTypeOperator"
        },
        {
          "include": "#castTypeOperator"
        },
        {
          "include": "#functionTypeOperator"
        }
      ]
    },
    "using": {
      "begin": "\\s*\\b(using)\\b",
      "end": "\\s*(?:$|;)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "match": "\\s*\\b(static)\\b",
          "captures": {
            "1": {
              "name": "keyword.other.static.cs"
            }
          }
        },
        {
          "begin": "(\\w+)(?=.*\\=)",
          "end": ";",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "begin": "\\s*\\=(?=[\\w\\s/])",
              "end": "(?=;)",
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "name": "entity.name.type.namespace.cs",
                  "match": "[\\w.]+"
                }
              ]
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.alias.namespace.cs"
            }
          }
        },
        {
          "name": "entity.name.type.namespace.cs",
          "match": "[\\w.]+"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other.using.cs"
        }
      }
    },
    "variable": {
      "patterns": [
        {
          "match": "\\s*\\b(var)\\s+(.*?)(?=(=|;))",
          "captures": {
            "1": {
              "name": "keyword.other.var.cs"
            },
            "2": {
              "name": "entity.name.variables.cs"
            }
          }
        },
        {
          "match": "\\s*\\b(?!var|return|yield|throw)([\\w+\u003c\u003e*?,\\[\\]]+)\\s+([\\w]+)\\s*(?=(=(?!=)|;))",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            "2": {
              "name": "entity.name.variables.cs"
            }
          }
        }
      ]
    }
  }
}
