{
  "name": "Emacs Lisp",
  "scopeName": "source.emacs.lisp",
  "patterns": [
    {
      "include": "#main"
    }
  ],
  "repository": {
    "arg-values": {
      "patterns": [
        {
          "name": "constant.language.$1.arguments.emacs.lisp",
          "match": "\u0026(optional|rest)(?=\\s|\\))"
        }
      ]
    },
    "binding": {
      "name": "storage.binding.emacs.lisp",
      "match": "\\b(?\u003c=[\\s()\\[]|^)(let\\*?|set[fq]?)(?=[\\s()]|$)"
    },
    "boolean": {
      "patterns": [
        {
          "name": "constant.boolean.true.emacs.lisp",
          "match": "\\b(?\u003c=[\\s()\\[]|^)t(?=[\\s()]|$)\\b"
        },
        {
          "name": "constant.language.nil.emacs.lisp",
          "match": "\\b(?\u003c=[\\s()\\[]|^)(nil)(?=[\\s()]|$)\\b"
        }
      ]
    },
    "comment": {
      "name": "comment.line.semicolon.emacs.lisp",
      "begin": ";",
      "end": "$",
      "patterns": [
        {
          "include": "#modeline"
        }
      ],
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.emacs.lisp"
        }
      }
    },
    "definition": {
      "patterns": [
        {
          "name": "meta.function.definition.emacs.lisp",
          "begin": "(\\()(defun|defmacro|defsubst)(?!-)\\b(?:\\s*(?![-+\\d])([-+=*/\\w~!@$%^\u0026:\u003c\u003e{}?]+))?",
          "end": "\\)",
          "patterns": [
            {
              "include": "#defun-innards"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.expression.begin.emacs.lisp"
            },
            "2": {
              "name": "storage.type.$2.function.emacs.lisp"
            },
            "3": {
              "name": "entity.function.name.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.expression.end.emacs.lisp"
            }
          }
        },
        {
          "name": "storage.type.function.emacs.lisp",
          "match": "\\b(?\u003c=[\\s()\\[]|^)defun(?=[\\s()]|$)"
        },
        {
          "name": "meta.$3.definition.emacs.lisp",
          "begin": "(?x) (?\u003c=\\s|^) (\\()\n(def(advice|class|const|custom|face|image|group|package|struct|subst|theme|type|var))\n(?:\\s+([-+=*/\\w~!@$%^\u0026:\u003c\u003e{}?]+))?\n(?=[\\s()]|$)",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.expression.begin.emacs.lisp"
            },
            "2": {
              "name": "storage.type.$3.emacs.lisp"
            },
            "4": {
              "name": "entity.name.$3.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.expression.end.emacs.lisp"
            }
          }
        },
        {
          "name": "storage.type.$1.emacs.lisp",
          "match": "\\b(?\u003c=[\\s()\\[]|^)(define-(?:condition|widget))(?=[\\s()]|$)\\b"
        }
      ]
    },
    "defun-innards": {
      "patterns": [
        {
          "name": "meta.argument-list.expression.emacs.lisp",
          "begin": "\\G\\s*(\\()",
          "end": "\\)",
          "patterns": [
            {
              "include": "#arg-keywords"
            },
            {
              "name": "variable.parameter.emacs.lisp",
              "match": "(?![-+\\d:\u0026'#])([-+=*/\\w~!@$%^\u0026:\u003c\u003e{}?]+)"
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.expression.begin.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.expression.end.emacs.lisp"
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    "escapes": {
      "patterns": [
        {
          "name": "constant.character.escape.hex.emacs.lisp",
          "match": "(\\?)\\\\u[A-Fa-f0-9]{4}|(\\?)\\\\U00[A-Fa-f0-9]{6}",
          "captures": {
            "1": {
              "name": "punctuation.definition.codepoint.emacs.lisp"
            },
            "2": {
              "name": "punctuation.definition.codepoint.emacs.lisp"
            }
          }
        },
        {
          "name": "constant.character.escape.hex.emacs.lisp",
          "match": "(\\?)\\\\x[A-Fa-f0-9]+",
          "captures": {
            "1": {
              "name": "punctuation.definition.codepoint.emacs.lisp"
            }
          }
        },
        {
          "name": "constant.character.escape.octal.emacs.lisp",
          "match": "(\\?)\\\\[0-7]{1,3}",
          "captures": {
            "1": {
              "name": "punctuation.definition.codepoint.emacs.lisp"
            }
          }
        },
        {
          "name": "constant.numeric.codepoint.emacs.lisp",
          "match": "(\\?)(?:[^\\\\]|(\\\\).)",
          "captures": {
            "1": {
              "name": "punctuation.definition.codepoint.emacs.lisp"
            },
            "2": {
              "name": "punctuation.definition.backslash.emacs.lisp"
            }
          }
        },
        {
          "name": "constant.character.escape.emacs.lisp",
          "match": "(\\\\).",
          "captures": {
            "1": {
              "name": "punctuation.definition.backslash.emacs.lisp"
            }
          }
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "name": "meta.expression.emacs.lisp",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.expression.begin.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.expression.end.emacs.lisp"
            }
          }
        },
        {
          "name": "meta.quoted.expression.emacs.lisp",
          "begin": "(\\')(\\()",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.symbol.emacs.lisp"
            },
            "2": {
              "name": "punctuation.section.quoted.expression.begin.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.quoted.expression.end.emacs.lisp"
            }
          }
        },
        {
          "name": "meta.backquoted.expression.emacs.lisp",
          "begin": "(\\`)(\\()",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.symbol.emacs.lisp"
            },
            "2": {
              "name": "punctuation.section.backquoted.expression.begin.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.backquoted.expression.end.emacs.lisp"
            }
          }
        },
        {
          "name": "meta.interpolated.expression.emacs.lisp",
          "begin": "(,@)(\\()",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.symbol.emacs.lisp"
            },
            "2": {
              "name": "punctuation.section.interpolated.expression.begin.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.interpolated.expression.end.emacs.lisp"
            }
          }
        }
      ]
    },
    "face-innards": {
      "patterns": [
        {
          "name": "meta.expression.display-type.emacs.lisp",
          "match": "(\\()(type)\\s+(graphic|x|pc|w32|tty)(\\))",
          "captures": {
            "1": {
              "name": "punctuation.section.expression.begin.emacs.lisp"
            },
            "2": {
              "name": "variable.language.display.type.emacs.lisp"
            },
            "3": {
              "name": "support.constant.display.type.emacs.lisp"
            },
            "4": {
              "name": "punctuation.section.expression.end.emacs.lisp"
            }
          }
        },
        {
          "name": "meta.expression.display-class.emacs.lisp",
          "match": "(\\()(class)\\s+(color|grayscale|mono)(\\))",
          "captures": {
            "1": {
              "name": "punctuation.section.expression.begin.emacs.lisp"
            },
            "2": {
              "name": "variable.language.display.class.emacs.lisp"
            },
            "3": {
              "name": "support.constant.display.class.emacs.lisp"
            },
            "4": {
              "name": "punctuation.section.expression.end.emacs.lisp"
            }
          }
        },
        {
          "name": "meta.expression.background-type.emacs.lisp",
          "match": "(\\()(background)\\s+(light|dark)(\\))",
          "captures": {
            "1": {
              "name": "punctuation.section.expression.begin.emacs.lisp"
            },
            "2": {
              "name": "variable.language.background-type.emacs.lisp"
            },
            "3": {
              "name": "support.constant.background-type.emacs.lisp"
            },
            "4": {
              "name": "punctuation.section.expression.end.emacs.lisp"
            }
          }
        },
        {
          "name": "meta.expression.display-prerequisite.emacs.lisp",
          "begin": "(\\()(min-colors|supports)(?=[\\s()]|$)",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.expression.begin.emacs.lisp"
            },
            "2": {
              "name": "variable.language.display-prerequisite.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.expression.end.emacs.lisp"
            }
          }
        }
      ]
    },
    "faces": {
      "name": "support.constant.face.emacs.lisp",
      "match": "(?x) \\b (?\u003c=[\\s()\\[]|^)\n\t(?:Buffer-menu-buffer|Info-quoted|Info-title-1-face|Info-title-2-face|Info-title-3-face|Info-title-4-face|Man-overstrike|Man-reverse\n\t|Man-underline|antlr-default|antlr-font-lock-default-face|antlr-font-lock-keyword-face|antlr-font-lock-literal-face\n\t|antlr-font-lock-ruledef-face|antlr-font-lock-ruleref-face|antlr-font-lock-syntax-face|antlr-font-lock-tokendef-face\n\t|antlr-font-lock-tokenref-face|antlr-keyword|antlr-literal|antlr-ruledef|antlr-ruleref|antlr-syntax|antlr-tokendef|antlr-tokenref\n\t|apropos-keybinding|apropos-property|apropos-symbol|bat-label-face|bg:erc-color-face0|bg:erc-color-face1|bg:erc-color-face10\n\t|bg:erc-color-face11|bg:erc-color-face12|bg:erc-color-face13|bg:erc-color-face14|bg:erc-color-face15|bg:erc-color-face2\n\t|bg:erc-color-face3|bg:erc-color-face4|bg:erc-color-face5|bg:erc-color-face6|bg:erc-color-face7|bg:erc-color-face8|bg:erc-color-face9\n\t|bold-italic|bold|bookmark-menu-bookmark|bookmark-menu-heading|border|breakpoint-disabled|breakpoint-enabled|buffer-menu-buffer\n\t|button|c-annotation-face|calc-nonselected-face|calc-selected-face|calendar-month-header|calendar-today|calendar-weekday-header\n\t|calendar-weekend-header|change-log-acknowledgement-face|change-log-acknowledgement|change-log-acknowledgment\n\t|change-log-conditionals-face|change-log-conditionals|change-log-date-face|change-log-date|change-log-email-face|change-log-email\n\t|change-log-file-face|change-log-file|change-log-function-face|change-log-function|change-log-list-face|change-log-list\n\t|change-log-name-face|change-log-name|comint-highlight-input|comint-highlight-prompt|compare-windows|compilation-column-number\n\t|compilation-error|compilation-info|compilation-line-number|compilation-mode-line-exit|compilation-mode-line-fail\n\t|compilation-mode-line-run|compilation-warning|completions-annotations|completions-common-part|completions-first-difference\n\t|cperl-array-face|cperl-hash-face|cperl-nonoverridable-face|css-property|css-selector|cua-global-mark|cua-rectangle-noselect\n\t|cua-rectangle|cursor|custom-button-mouse|custom-button-pressed-unraised|custom-button-pressed|custom-button-unraised|custom-button\n\t|custom-changed|custom-comment-tag|custom-comment|custom-documentation|custom-face-tag|custom-group-subtitle|custom-group-tag-1\n\t|custom-group-tag|custom-invalid|custom-link|custom-modified|custom-rogue|custom-saved|custom-set|custom-state|custom-themed\n\t|custom-variable-button|custom-variable-tag|custom-visibility|cvs-filename-face|cvs-filename|cvs-handled-face|cvs-handled\n\t|cvs-header-face|cvs-header|cvs-marked-face|cvs-marked|cvs-msg-face|cvs-msg|cvs-need-action-face|cvs-need-action|cvs-unknown-face\n\t|cvs-unknown|default|diary-anniversary|diary-button|diary-time|diary|diff-added-face|diff-added|diff-changed-face|diff-changed\n\t|diff-context-face|diff-context|diff-file-header-face|diff-file-header|diff-function-face|diff-function|diff-header-face\n\t|diff-header|diff-hunk-header-face|diff-hunk-header|diff-index-face|diff-index|diff-indicator-added|diff-indicator-changed\n\t|diff-indicator-removed|diff-nonexistent-face|diff-nonexistent|diff-refine-added|diff-refine-change|diff-refine-changed\n\t|diff-refine-removed|diff-removed-face|diff-removed|dired-directory|dired-flagged|dired-header|dired-ignored|dired-mark\n\t|dired-marked|dired-perm-write|dired-symlink|dired-warning|ebrowse-default|ebrowse-file-name|ebrowse-member-attribute\n\t|ebrowse-member-class|ebrowse-progress|ebrowse-root-class|ebrowse-tree-mark|ediff-current-diff-A|ediff-current-diff-Ancestor\n\t|ediff-current-diff-B|ediff-current-diff-C|ediff-even-diff-A|ediff-even-diff-Ancestor|ediff-even-diff-B|ediff-even-diff-C\n\t|ediff-fine-diff-A|ediff-fine-diff-Ancestor|ediff-fine-diff-B|ediff-fine-diff-C|ediff-odd-diff-A|ediff-odd-diff-Ancestor\n\t|ediff-odd-diff-B|ediff-odd-diff-C|eieio-custom-slot-tag-face|eldoc-highlight-function-argument|epa-field-body\n\t|epa-field-name|epa-mark|epa-string|epa-validity-disabled|epa-validity-high|epa-validity-low|epa-validity-medium|erc-action-face\n\t|erc-bold-face|erc-button|erc-command-indicator-face|erc-current-nick-face|erc-dangerous-host-face|erc-default-face|erc-direct-msg-face\n\t|erc-error-face|erc-fool-face|erc-header-line|erc-input-face|erc-inverse-face|erc-keyword-face|erc-my-nick-face|erc-my-nick-prefix-face\n\t|erc-nick-default-face|erc-nick-msg-face|erc-nick-prefix-face|erc-notice-face|erc-pal-face|erc-prompt-face|erc-timestamp-face|erc-underline-face\n\t|error|ert-test-result-expected|ert-test-result-unexpected|escape-glyph|eww-form-checkbox|eww-form-file|eww-form-select|eww-form-submit\n\t|eww-form-text|eww-form-textarea|eww-invalid-certificate|eww-valid-certificate|excerpt|ffap|fg:erc-color-face0|fg:erc-color-face1\n\t|fg:erc-color-face10|fg:erc-color-face11|fg:erc-color-face12|fg:erc-color-face13|fg:erc-color-face14|fg:erc-color-face15|fg:erc-color-face2\n\t|fg:erc-color-face3|fg:erc-color-face4|fg:erc-color-face5|fg:erc-color-face6|fg:erc-color-face7|fg:erc-color-face8|fg:erc-color-face9\n\t|file-name-shadow|fixed-pitch|fixed|flymake-errline|flymake-warnline|flyspell-duplicate|flyspell-incorrect|font-lock-builtin-face\n\t|font-lock-comment-delimiter-face|font-lock-comment-face|font-lock-constant-face|font-lock-doc-face|font-lock-function-name-face\n\t|font-lock-keyword-face|font-lock-negation-char-face|font-lock-preprocessor-face|font-lock-regexp-grouping-backslash|font-lock-regexp-grouping-construct\n\t|font-lock-string-face|font-lock-type-face|font-lock-variable-name-face|font-lock-warning-face|fringe|glyphless-char|gnus-button\n\t|gnus-cite-1|gnus-cite-10|gnus-cite-11|gnus-cite-2|gnus-cite-3|gnus-cite-4|gnus-cite-5|gnus-cite-6|gnus-cite-7|gnus-cite-8|gnus-cite-9\n\t|gnus-cite-attribution-face|gnus-cite-attribution|gnus-cite-face-1|gnus-cite-face-10|gnus-cite-face-11|gnus-cite-face-2|gnus-cite-face-3\n\t|gnus-cite-face-4|gnus-cite-face-5|gnus-cite-face-6|gnus-cite-face-7|gnus-cite-face-8|gnus-cite-face-9|gnus-emphasis-bold-italic\n\t|gnus-emphasis-bold|gnus-emphasis-highlight-words|gnus-emphasis-italic|gnus-emphasis-strikethru|gnus-emphasis-underline-bold-italic\n\t|gnus-emphasis-underline-bold|gnus-emphasis-underline-italic|gnus-emphasis-underline|gnus-group-mail-1-empty-face|gnus-group-mail-1-empty\n\t|gnus-group-mail-1-face|gnus-group-mail-1|gnus-group-mail-2-empty-face|gnus-group-mail-2-empty|gnus-group-mail-2-face|gnus-group-mail-2\n\t|gnus-group-mail-3-empty-face|gnus-group-mail-3-empty|gnus-group-mail-3-face|gnus-group-mail-3|gnus-group-mail-low-empty-face\n\t|gnus-group-mail-low-empty|gnus-group-mail-low-face|gnus-group-mail-low|gnus-group-news-1-empty-face|gnus-group-news-1-empty|gnus-group-news-1-face\n\t|gnus-group-news-1|gnus-group-news-2-empty-face|gnus-group-news-2-empty|gnus-group-news-2-face|gnus-group-news-2|gnus-group-news-3-empty-face\n\t|gnus-group-news-3-empty|gnus-group-news-3-face|gnus-group-news-3|gnus-group-news-4-empty-face|gnus-group-news-4-empty|gnus-group-news-4-face\n\t|gnus-group-news-4|gnus-group-news-5-empty-face|gnus-group-news-5-empty|gnus-group-news-5-face|gnus-group-news-5|gnus-group-news-6-empty-face\n\t|gnus-group-news-6-empty|gnus-group-news-6-face|gnus-group-news-6|gnus-group-news-low-empty-face|gnus-group-news-low-empty|gnus-group-news-low-face\n\t|gnus-group-news-low|gnus-header-content-face|gnus-header-content|gnus-header-from-face|gnus-header-from|gnus-header-name-face\n\t|gnus-header-name|gnus-header-newsgroups-face|gnus-header-newsgroups|gnus-header-subject-face|gnus-header-subject|gnus-signature-face\n\t|gnus-signature|gnus-splash-face|gnus-splash|gnus-summary-cancelled-face|gnus-summary-cancelled|gnus-summary-high-ancient-face\n\t|gnus-summary-high-ancient|gnus-summary-high-read-face|gnus-summary-high-read|gnus-summary-high-ticked-face|gnus-summary-high-ticked\n\t|gnus-summary-high-undownloaded-face|gnus-summary-high-undownloaded|gnus-summary-high-unread-face|gnus-summary-high-unread|gnus-summary-low-ancient-face\n\t|gnus-summary-low-ancient|gnus-summary-low-read-face|gnus-summary-low-read|gnus-summary-low-ticked-face|gnus-summary-low-ticked\n\t|gnus-summary-low-undownloaded-face|gnus-summary-low-undownloaded|gnus-summary-low-unread-face|gnus-summary-low-unread|gnus-summary-normal-ancient-face\n\t|gnus-summary-normal-ancient|gnus-summary-normal-read-face|gnus-summary-normal-read|gnus-summary-normal-ticked-face|gnus-summary-normal-ticked\n\t|gnus-summary-normal-undownloaded-face|gnus-summary-normal-undownloaded|gnus-summary-normal-unread-face|gnus-summary-normal-unread\n\t|gnus-summary-selected-face|gnus-summary-selected|gomoku-O|gomoku-X|header-line|help-argument-name|hexl-address-region|hexl-ascii-region\n\t|hi-black-b|hi-black-hb|hi-blue-b|hi-blue|hi-green-b|hi-green|hi-pink|hi-red-b|hi-yellow|hide-ifdef-shadow|highlight-changes-delete-face\n\t|highlight-changes-delete|highlight-changes-face|highlight-changes|highlight|hl-line|holiday|icomplete-first-match|idlwave-help-link\n\t|idlwave-shell-bp|idlwave-shell-disabled-bp|idlwave-shell-electric-stop-line|idlwave-shell-pending-electric-stop|idlwave-shell-pending-stop\n\t|ido-first-match|ido-incomplete-regexp|ido-indicator|ido-only-match|ido-subdir|ido-virtual|info-header-node|info-header-xref|info-index-match\n\t|info-menu-5|info-menu-header|info-menu-star|info-node|info-title-1|info-title-2|info-title-3|info-title-4|info-xref|isearch-fail|isearch-lazy-highlight-face\n\t|isearch|iswitchb-current-match|iswitchb-invalid-regexp|iswitchb-single-match|iswitchb-virtual-matches|italic|landmark-font-lock-face-O\n\t|landmark-font-lock-face-X|lazy-highlight|ld-script-location-counter|link-visited|link|log-edit-header|log-edit-summary|log-edit-unknown-header\n\t|log-view-file-face|log-view-file|log-view-message-face|log-view-message|makefile-makepp-perl|makefile-shell|makefile-space-face\n\t|makefile-space|makefile-targets|match|menu|message-cited-text-face|message-cited-text|message-header-cc-face|message-header-cc|message-header-name-face\n\t|message-header-name|message-header-newsgroups-face|message-header-newsgroups|message-header-other-face|message-header-other|message-header-subject-face\n\t|message-header-subject|message-header-to-face|message-header-to|message-header-xheader-face|message-header-xheader|message-mml-face\n\t|message-mml|message-separator-face|message-separator|mh-folder-address|mh-folder-blacklisted|mh-folder-body|mh-folder-cur-msg-number\n\t|mh-folder-date|mh-folder-deleted|mh-folder-followup|mh-folder-msg-number|mh-folder-refiled|mh-folder-sent-to-me-hint|mh-folder-sent-to-me-sender\n\t|mh-folder-subject|mh-folder-tick|mh-folder-to|mh-folder-whitelisted|mh-letter-header-field|mh-search-folder|mh-show-cc|mh-show-date\n\t|mh-show-from|mh-show-header|mh-show-pgg-bad|mh-show-pgg-good|mh-show-pgg-unknown|mh-show-signature|mh-show-subject|mh-show-to|mh-speedbar-folder-with-unseen-messages\n\t|mh-speedbar-folder|mh-speedbar-selected-folder-with-unseen-messages|mh-speedbar-selected-folder|minibuffer-prompt|mm-command-output\n\t|mm-uu-extract|mode-line-buffer-id|mode-line-emphasis|mode-line-highlight|mode-line-inactive|mode-line|modeline-buffer-id|modeline-highlight\n\t|modeline-inactive|mouse|mpuz-solved|mpuz-text|mpuz-trivial|mpuz-unsolved|newsticker-date-face|newsticker-default-face|newsticker-enclosure-face\n\t|newsticker-extra-face|newsticker-feed-face|newsticker-immortal-item-face|newsticker-new-item-face|newsticker-obsolete-item-face\n\t|newsticker-old-item-face|newsticker-statistics-face|newsticker-treeview-face|newsticker-treeview-immortal-face|newsticker-treeview-new-face\n\t|newsticker-treeview-obsolete-face|newsticker-treeview-old-face|newsticker-treeview-selection-face|next-error|nobreak-space|nxml-attribute-colon\n\t|nxml-attribute-local-name|nxml-attribute-prefix|nxml-attribute-value-delimiter|nxml-attribute-value|nxml-cdata-section-CDATA\n\t|nxml-cdata-section-content|nxml-cdata-section-delimiter|nxml-char-ref-delimiter|nxml-char-ref-number|nxml-comment-content|nxml-comment-delimiter\n\t|nxml-delimited-data|nxml-delimiter|nxml-element-colon|nxml-element-local-name|nxml-element-prefix|nxml-entity-ref-delimiter|nxml-entity-ref-name\n\t|nxml-glyph|nxml-hash|nxml-heading|nxml-markup-declaration-delimiter|nxml-name|nxml-namespace-attribute-colon|nxml-namespace-attribute-prefix\n\t|nxml-namespace-attribute-value-delimiter|nxml-namespace-attribute-value|nxml-namespace-attribute-xmlns|nxml-outline-active-indicator\n\t|nxml-outline-ellipsis|nxml-outline-indicator|nxml-processing-instruction-content|nxml-processing-instruction-delimiter|nxml-processing-instruction-target\n\t|nxml-prolog-keyword|nxml-prolog-literal-content|nxml-prolog-literal-delimiter|nxml-ref|nxml-tag-delimiter|nxml-tag-slash|nxml-text\n\t|octave-function-comment-block|org-agenda-calendar-event|org-agenda-calendar-sexp|org-agenda-clocking|org-agenda-column-dateline\n\t|org-agenda-current-time|org-agenda-date-today|org-agenda-date-weekend|org-agenda-date|org-agenda-diary|org-agenda-dimmed-todo-face\n\t|org-agenda-done|org-agenda-filter-category|org-agenda-filter-regexp|org-agenda-filter-tags|org-agenda-restriction-lock|org-agenda-structure\n\t|org-archived|org-block-background|org-block-begin-line|org-block-end-line|org-block|org-checkbox-statistics-done|org-checkbox-statistics-todo\n\t|org-checkbox|org-clock-overlay|org-code|org-column-title|org-column|org-date-selected|org-date|org-default|org-document-info-keyword\n\t|org-document-info|org-document-title|org-done|org-drawer|org-ellipsis|org-footnote|org-formula|org-headline-done|org-hide|org-latex-and-related\n\t|org-level-1|org-level-2|org-level-3|org-level-4|org-level-5|org-level-6|org-level-7|org-level-8|org-link|org-list-dt|org-macro|org-meta-line\n\t|org-mode-line-clock-overrun|org-mode-line-clock|org-priority|org-property-value|org-quote|org-scheduled-previously|org-scheduled-today\n\t|org-scheduled|org-sexp-date|org-special-keyword|org-table|org-tag-group|org-tag|org-target|org-time-grid|org-todo|org-upcoming-deadline\n\t|org-verbatim|org-verse|org-warning|outline-1|outline-2|outline-3|outline-4|outline-5|outline-6|outline-7|outline-8|proced-mark|proced-marked\n\t|proced-sort-header|pulse-highlight-face|pulse-highlight-start-face|query-replace|rcirc-bright-nick|rcirc-dim-nick|rcirc-keyword\n\t|rcirc-my-nick|rcirc-nick-in-message-full-line|rcirc-nick-in-message|rcirc-other-nick|rcirc-prompt|rcirc-server-prefix|rcirc-server\n\t|rcirc-timestamp|rcirc-track-keyword|rcirc-track-nick|rcirc-url|reb-match-0|reb-match-1|reb-match-2|reb-match-3|rectangle-preview-face\n\t|region|rmail-header-name|rmail-highlight|rng-error|rst-adornment|rst-block|rst-comment|rst-definition|rst-directive|rst-emphasis1\n\t|rst-emphasis2|rst-external|rst-level-1|rst-level-2|rst-level-3|rst-level-4|rst-level-5|rst-level-6|rst-literal|rst-reference|rst-transition\n\t|ruler-mode-column-number|ruler-mode-comment-column|ruler-mode-current-column|ruler-mode-default|ruler-mode-fill-column|ruler-mode-fringes\n\t|ruler-mode-goal-column|ruler-mode-margins|ruler-mode-pad|ruler-mode-tab-stop|scroll-bar|secondary-selection|semantic-highlight-edits-face\n\t|semantic-highlight-func-current-tag-face|semantic-unmatched-syntax-face|senator-momentary-highlight-face|sgml-namespace|sh-escaped-newline\n\t|sh-heredoc-face|sh-heredoc|sh-quoted-exec|shadow|show-paren-match-face|show-paren-match|show-paren-mismatch-face|show-paren-mismatch\n\t|shr-link|shr-strike-through|smerge-base-face|smerge-base|smerge-markers-face|smerge-markers|smerge-mine-face|smerge-mine|smerge-other-face\n\t|smerge-other|smerge-refined-added|smerge-refined-change|smerge-refined-changed|smerge-refined-removed|speedbar-button-face|speedbar-directory-face\n\t|speedbar-file-face|speedbar-highlight-face|speedbar-selected-face|speedbar-separator-face|speedbar-tag-face|srecode-separator-face\n\t|strokes-char|subscript|success|superscript|table-cell|tcl-escaped-newline|term-bold|term-color-black|term-color-blue|term-color-cyan\n\t|term-color-green|term-color-magenta|term-color-red|term-color-white|term-color-yellow|term-underline|term|testcover-1value|testcover-nohits\n\t|tex-math-face|tex-math|tex-verbatim-face|tex-verbatim|texinfo-heading-face|texinfo-heading|tmm-inactive|todo-archived-only|todo-button\n\t|todo-category-string|todo-comment|todo-date|todo-diary-expired|todo-done-sep|todo-done|todo-key-prompt|todo-mark|todo-nondiary|todo-prefix-string\n\t|todo-search|todo-sorted-column|todo-time|todo-top-priority|tool-bar|tooltip|trailing-whitespace|tty-menu-disabled-face|tty-menu-enabled-face\n\t|tty-menu-selected-face|underline|variable-pitch|vc-conflict-state|vc-edited-state|vc-locally-added-state|vc-locked-state|vc-missing-state\n\t|vc-needs-update-state|vc-removed-state|vc-state-base-face|vc-up-to-date-state|vcursor|vera-font-lock-function|vera-font-lock-interface\n\t|vera-font-lock-number|verilog-font-lock-ams-face|verilog-font-lock-grouping-keywords-face|verilog-font-lock-p1800-face|verilog-font-lock-translate-off-face\n\t|vertical-border|vhdl-font-lock-attribute-face|vhdl-font-lock-directive-face|vhdl-font-lock-enumvalue-face|vhdl-font-lock-function-face\n\t|vhdl-font-lock-generic-\\/constant-face|vhdl-font-lock-prompt-face|vhdl-font-lock-reserved-words-face|vhdl-font-lock-translate-off-face\n\t|vhdl-font-lock-type-face|vhdl-font-lock-variable-face|vhdl-speedbar-architecture-face|vhdl-speedbar-architecture-selected-face\n\t|vhdl-speedbar-configuration-face|vhdl-speedbar-configuration-selected-face|vhdl-speedbar-entity-face|vhdl-speedbar-entity-selected-face\n\t|vhdl-speedbar-instantiation-face|vhdl-speedbar-instantiation-selected-face|vhdl-speedbar-library-face|vhdl-speedbar-package-face\n\t|vhdl-speedbar-package-selected-face|vhdl-speedbar-subprogram-face|viper-minibuffer-emacs|viper-minibuffer-insert|viper-minibuffer-vi\n\t|viper-replace-overlay|viper-search|warning|which-func|whitespace-big-indent|whitespace-empty|whitespace-hspace|whitespace-indentation\n\t|whitespace-line|whitespace-newline|whitespace-space-after-tab|whitespace-space-before-tab|whitespace-space|whitespace-tab|whitespace-trailing\n\t|widget-button-face|widget-button-pressed-face|widget-button-pressed|widget-button|widget-documentation-face|widget-documentation\n\t|widget-field-face|widget-field|widget-inactive-face|widget-inactive|widget-single-line-field-face|widget-single-line-field|window-divider-first-pixel\n\t|window-divider-last-pixel|window-divider|woman-addition-face|woman-addition|woman-bold-face|woman-bold|woman-italic-face|woman-italic\n\t|woman-unknown-face|woman-unknown)\n(?=[\\s()]|$)\\b"
    },
    "format": {
      "contentName": "string.quoted.double.emacs.lisp",
      "begin": "\\G",
      "end": "(?=\")",
      "patterns": [
        {
          "match": "(%[%cdefgosSxX])|(%.)",
          "captures": {
            "1": {
              "name": "constant.other.placeholder.emacs.lisp"
            },
            "2": {
              "name": "invalid.illegal.placeholder.emacs.lisp"
            }
          }
        },
        {
          "include": "#string-innards"
        }
      ]
    },
    "formatting": {
      "name": "meta.string-formatting.expression.emacs.lisp",
      "begin": "(\\()(format|format-message|message|error)(?=\\s|$|\")",
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\G\\s*(\")",
          "end": "\"",
          "patterns": [
            {
              "include": "#format"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.emacs.lisp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.emacs.lisp"
            }
          }
        },
        {
          "begin": "\\G\\s*$\\n?",
          "end": "\"|(?\u003c!^)$|[\\s\"](?=[^\\s\"])",
          "patterns": [
            {
              "match": "^\\s*$\\n?"
            },
            {
              "match": "(?:^|\\G)\\s*(\")",
              "captures": {
                "1": {
                  "name": "punctuation.definition.string.begin.emacs.lisp"
                }
              }
            },
            {
              "begin": "(?\u003c=\")",
              "end": "\"",
              "patterns": [
                {
                  "include": "#format"
                }
              ],
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.emacs.lisp"
                }
              }
            }
          ]
        },
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.expression.begin.emacs.lisp"
        },
        "2": {
          "name": "support.function.$2.emacs.lisp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.expression.end.emacs.lisp"
        }
      }
    },
    "functions": {
      "name": "keyword.control.function.$1.emacs.lisp",
      "match": "(?x)\\b(?\u003c=[\\s()\\[]|^)\n(abs|append|apply|assoc|butlast|c[ad]{1,2}r|c[ad]r-safe|consp?|copy-alist|copy-tree\n|dolist|funcall|last|length|listp?|load|make-list|mapc|mapcar|max|min|member|nbutlast\n|nconc|nreverse|nth|nthcdr|null|pop|prin[1ct]|push|quote|rassoc|reverse|rplac[ad]\n|safe-length|setcar|setcdr)\n(?=[\\s()]|$)\\b"
    },
    "keyword": {
      "name": "constant.keyword.emacs.lisp",
      "match": "(?\u003c=[\\s()\\[]|^)(:)[-+=*/\\w~!@$%^\u0026:\u003c\u003e{}?]+",
      "captures": {
        "1": {
          "name": "punctuation.definition.keyword.emacs.lisp"
        }
      }
    },
    "lambda": {
      "name": "meta.lambda.expression.emacs.lisp",
      "begin": "(\\()(lambda|function)\\s+",
      "end": "\\)",
      "patterns": [
        {
          "include": "#defun-innards"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.expression.begin.emacs.lisp"
        },
        "2": {
          "name": "storage.type.lambda.function.emacs.lisp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.expression.end.emacs.lisp"
        }
      }
    },
    "loop": {
      "name": "meta.cl-lib.loop.emacs.lisp",
      "begin": "(\\()(cl-loop)(?=[\\s()]|$)",
      "end": "\\)",
      "patterns": [
        {
          "name": "keyword.control.emacs.lisp",
          "match": "(?x)(?\u003c=[\\s()\\[]|^)\n(above|across|across-ref|always|and|append|as|below|by|collect|concat\n|count|do|each|finally|for|from|if|in|in-ref|initially|into|maximize\n|minimize|named|nconc|never|of|of-ref|on|repeat|return|sum|then|thereis\n|sum|to|unless|until|using|vconcat|when|while|with|(?:\n\t\n\tbeing    \\s+\n\t(?:the)? \\s+\n\t\n\t(?:element|hash-key|hash-value|key-code|key-binding\n\t|key-seq|overlay|interval|symbols|frame|window|buffer)\n\ts?\n\n))(?=[\\s()]|$)"
        },
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.expression.begin.emacs.lisp"
        },
        "2": {
          "name": "support.function.cl-lib.emacs.lisp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.expression.end.emacs.lisp"
        }
      }
    },
    "main": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#lambda"
        },
        {
          "include": "#loop"
        },
        {
          "include": "#escapes"
        },
        {
          "include": "#definition"
        },
        {
          "include": "#formatting"
        },
        {
          "include": "#face-innards"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#functions"
        },
        {
          "include": "#binding"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#string"
        },
        {
          "include": "#number"
        },
        {
          "include": "#quote"
        },
        {
          "include": "#symbols"
        },
        {
          "include": "#vectors"
        },
        {
          "include": "#arg-values"
        },
        {
          "include": "#boolean"
        },
        {
          "include": "#faces"
        },
        {
          "include": "#stdlib"
        }
      ]
    },
    "modeline": {
      "name": "meta.modeline.emacs.lisp",
      "match": "(-\\*-)(.*)(-\\*-)",
      "captures": {
        "1": {
          "name": "punctuation.definition.modeline.begin.emacs.lisp"
        },
        "2": {
          "patterns": [
            {
              "include": "#modeline-innards"
            }
          ]
        },
        "3": {
          "name": "punctuation.definition.modeline.end.emacs.lisp"
        }
      }
    },
    "modeline-innards": {
      "patterns": [
        {
          "name": "meta.modeline.variable.emacs.lisp",
          "match": "([^\\s:;]+)\\s*(:)\\s*([^;]*)",
          "captures": {
            "1": {
              "name": "variable.assignment.modeline.emacs.lisp"
            },
            "2": {
              "name": "punctuation.separator.key-value.emacs.lisp"
            },
            "3": {
              "patterns": [
                {
                  "include": "#modeline-innards"
                }
              ]
            }
          }
        },
        {
          "name": "punctuation.terminator.statement.emacs.lisp",
          "match": ";"
        },
        {
          "name": "punctuation.separator.key-value.emacs.lisp",
          "match": ":"
        },
        {
          "name": "string.other.modeline.emacs.lisp",
          "match": "\\S+"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.integer.binary.emacs.lisp",
          "match": "(?\u003c=[\\s()\\[]|^)(#)[Bb][01]+",
          "captures": {
            "1": {
              "name": "punctuation.definition.binary.emacs.lisp"
            }
          }
        },
        {
          "name": "constant.numeric.integer.hex.viml",
          "match": "(?\u003c=[\\s()\\[]|^)(#)[Xx][0-9A-Fa-f]+",
          "captures": {
            "1": {
              "name": "punctuation.definition.hex.emacs.lisp"
            }
          }
        },
        {
          "name": "constant.numeric.float.emacs.lisp",
          "match": "(?\u003c=[\\s()\\[]|^)[-+]?\\d*\\.\\d+(?:[Ee][-+]?\\d+|[Ee]\\+(?:INF|NaN))?(?=[\\s()]|$)"
        },
        {
          "name": "constant.numeric.integer.emacs.lisp",
          "match": "(?\u003c=[\\s()\\[]|^)[-+]?\\d+(?:[Ee][-+]?\\d+|[Ee]\\+(?:INF|NaN))?(?=[\\s()]|$)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.control.$1.emacs.lisp",
          "match": "(?x)(?\u003c=[()]|^)\n(and|catch|cond|condition-case(?:-unless-debug)?|dotimes|eql?\n|equal|if|not|or|pcase|prog[12n]|throw|unless|unwind-protect\n|when|while)\n(?=[\\s()]|$)"
        },
        {
          "name": "storage.modifier.interactive.function.emacs.lisp",
          "match": "(?\u003c=\\(|\\s|^)(interactive)(?=\\s|\\(|\\))"
        },
        {
          "name": "keyword.operator.numeric.emacs.lisp",
          "match": "(?\u003c=\\(|\\s|^)[-*+/%](?=\\s|\\)|$)"
        },
        {
          "name": "keyword.operator.comparison.emacs.lisp",
          "match": "(?\u003c=\\(|\\s|^)[/\u003c\u003e]=|[=\u003c\u003e](?=\\s|\\)|$)"
        },
        {
          "name": "keyword.operator.pair-separator.emacs.lisp",
          "match": "(?\u003c=\\s)\\.(?=\\s|$)"
        }
      ]
    },
    "quote": {
      "patterns": [
        {
          "name": "constant.other.symbol.emacs.lisp",
          "match": "(')([-+=*/\\w~!@$%^\u0026:\u003c\u003e{}?]+)",
          "captures": {
            "1": {
              "name": "punctuation.definition.quote.emacs.lisp"
            },
            "2": {
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        }
      ]
    },
    "stdlib": {
      "patterns": [
        {
          "name": "support.function.emacs.lisp"
        },
        {
          "name": "support.function.cl-lib.emacs.lisp",
          "match": "(?x)(?\u003c=[()]|^)(?:\n\tdefine-modify-macro|define-setf-method|defsetf|eval-when-compile|flet|labels|lexical-let\\*?|\n\t\n\tcl-(?:acons|adjoin|assert|assoc|assoc-if|assoc-if-not|block|caddr|callf|callf2|case|ceiling|check-type|coerce\n\t|compiler-macroexpand|concatenate|copy-list|count|count-if|count-if-not|decf|declaim|declare|define-compiler-macro\n\t|defmacro|defstruct|defsubst|deftype|defun|delete|delete-duplicates|delete-if|delete-if-not|destructuring-bind\n\t|do\\*?|do-all-symbols|do-symbols|dolist|dotimes|ecase|endp|equalp|etypecase|eval-when|evenp|every|fill|find|find-if\n\t|find-if-not|first|flet|float-limits|floor|function|gcd|gensym|gentemp|getf?|incf|intersection|isqrt|labels\n\t|lcm|ldiff|letf\\*?|list\\*|list-length|load-time-value|locally|loop|macrolet|make-random-state|map|mapc|mapcan\n\t|mapcar|mapcon|mapl|maplist|member|member-if|member-if-not|merge|minusp|mismatch|mod|multiple-value-bind\n\t|multiple-value-setq|nintersection|notany|notevery|nset-difference|nset-exclusive-or|nsublis|nsubst|nsubst-if\n\t|nsubst-if-not|nsubstitute|nsubstitute-if|nsubstitute-if-not|nunion|oddp|pairlis|plusp|position|position-if\n\t|position-if-not|prettyexpand|proclaim|progv|psetf|psetq|pushnew|random|random-state-p|rassoc|rassoc-if|rassoc-if-not\n\t|reduce|remf?|remove|remove-duplicates|remove-if|remove-if-not|remprop|replace|rest|return|return-from|rotatef\n\t|round|search|set-difference|set-exclusive-or|shiftf|some|sort|stable-sort|sublis|subseq|subsetp|subst|subst-if\n\t|subst-if-not|substitute|substitute-if|substitute-if-not|symbol-macrolet|tagbody|tailp|the|tree-equal|truncate\n\t|typecase|typep|union)\n)(?=[\\s()]|$)"
        },
        {
          "name": "support.function.emacs.lisp"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.emacs.lisp",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "include": "#string-innards"
        }
      ],
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.emacs.lisp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.emacs.lisp"
        }
      }
    },
    "string-innards": {
      "patterns": [
        {
          "name": "constant.character.escape.newline.emacs.lisp",
          "match": "(\\\\)$\\n?"
        },
        {
          "name": "constant.character.escape.emacs.lisp",
          "match": "(\\\\).",
          "captures": {
            "1": {
              "name": "punctuation.escape.backslash.emacs.lisp"
            }
          }
        }
      ]
    },
    "symbols": {
      "patterns": [
        {
          "name": "constant.other.interned.blank.symbol.emacs.lisp",
          "match": "(?\u003c=[\\s()\\[]|^)##",
          "captures": {
            "0": {
              "name": "punctuation.definition.symbol.emacs.lisp"
            }
          }
        },
        {
          "name": "constant.other.symbol.emacs.lisp",
          "match": "(?\u003c=[\\s()\\[]|^)(#)((?:[-'+=*/\\w~!@$%^\u0026:\u003c\u003e{}?]|\\\\.)+)",
          "captures": {
            "1": {
              "name": "punctuation.definition.symbol.emacs.lisp"
            },
            "2": {
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "name": "constant.other.spliced.symbol.emacs.lisp",
          "match": "(,@)([-+=*/\\w~!@$%^\u0026:\u003c\u003e{}?]+)",
          "captures": {
            "1": {
              "name": "punctuation.definition.spliced.symbol.emacs.lisp"
            }
          }
        }
      ]
    },
    "vectors": {
      "patterns": [
        {
          "name": "punctuation.section.vector.begin.emacs.lisp",
          "match": "\\["
        },
        {
          "name": "punctuation.section.vector.end.emacs.lisp",
          "match": "\\]"
        }
      ]
    }
  }
}
