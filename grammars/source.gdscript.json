{
  "name": "GDScript (Godot Engine)",
  "scopeName": "source.gdscript",
  "patterns": [
    {
      "name": "comment.line.number-sign.gdscript",
      "match": "(#).*$\\n?",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.number-sign.gdscript"
        }
      }
    },
    {
      "name": "comment.block.triple-quote",
      "begin": "^(\"\"\")",
      "end": "(\"\"\")",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.triple-quote.gdscript"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.comment.triple-quote.gdscript"
        }
      }
    },
    {
      "name": "string.quoted.double.gdscript",
      "begin": "\"",
      "end": "(?\u003c!\\\\)\""
    },
    {
      "name": "string.quoted.single.gdscript",
      "begin": "'",
      "end": "(?\u003c!\\\\)'"
    },
    {
      "name": "string.quoted.triple.gdscript",
      "begin": "\"\"\"",
      "end": "(?\u003c!\\\\)\"\"\""
    },
    {
      "name": "string.quoted.double.node-path.gdscript",
      "begin": "@\"",
      "end": "(?\u003c!\\\\)\""
    },
    {
      "name": "constant.numeric.integer.hexadecimal.gdscript",
      "match": "\\b(?i:0x[0-9A-Fa-f]*)\\b"
    },
    {
      "name": "constant.numeric.float.gdscript",
      "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))\\b"
    },
    {
      "name": "constant.numeric.float.gdscript",
      "match": "\\b(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))\\b"
    },
    {
      "name": "constant.numeric.float.gdscript",
      "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))\\b"
    },
    {
      "name": "constant.numeric.integer.gdscript",
      "match": "\\b\\d+\\b"
    },
    {
      "name": "keyword.control.flow.gdscript",
      "match": "\\b(?i:elif|else|for|if|while|break|continue|pass|return)\\b"
    },
    {
      "name": "keyword.operator.logical.gdscript",
      "match": "\\b(?i:\u0026\u0026|and|in|is|!|not|\\|\\||or)\\b"
    },
    {
      "name": "keyword.operator.comparison.gdscript",
      "match": "\u003c=|\u003e=|==|\u003c|\u003e|!="
    },
    {
      "name": "keyword.operator.arithmetic.gdscript",
      "match": "\\+=|-=|\\*=|/=|%=|\u0026=|\\|=|\\*|/|%|\\+|-|\u003c\u003c|\u003e\u003e|\u0026|\\||\\^|~"
    },
    {
      "name": "keyword.operator.assignment.gdscript",
      "match": "="
    },
    {
      "name": "support.type.basic.gdscript",
      "match": "\\b(bool|int|float|String|funcref)\\b"
    },
    {
      "name": "support.type.vector.gdscript",
      "match": "\\b(Vector[23]|Rect2|Matrix32?|Plane|Quat|AABB|Transform)\\b"
    },
    {
      "name": "support.type.engine.gdscript",
      "match": "\\b(Color|Image|NodePath|RID|Object|InputEvent)\\b"
    },
    {
      "name": "support.type.container.gdscript",
      "match": "\\b(Array|Dictionary|ByteArray|IntArray|FloatArray|StringArray|Vector[23]Array|ColorArray)\\b"
    },
    {
      "match": "^\\s*(?i:(class))\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*:",
      "captures": {
        "1": {
          "name": "storage.type.class.gdscript"
        },
        "2": {
          "name": "entity.name.type.class.gdscript"
        }
      }
    },
    {
      "begin": "^\\s*(?i:(?:(static)\\s+)?(func))\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(",
      "end": "\\)\\s*:",
      "patterns": [
        {
          "name": "variable.parameter.gdscript",
          "match": "[a-zA-Z_][a-zA-Z_0-9]*"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.static-function.gdscript"
        },
        "2": {
          "name": "storage.type.function.gdscript"
        },
        "3": {
          "name": "entity.name.function.gdscript"
        }
      }
    },
    {
      "begin": "^\\s*(?i:(signal))\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(",
      "end": "\\)\\s*:",
      "patterns": [
        {
          "name": "variable.parameter.gdscript",
          "match": "[a-zA-Z_][a-zA-Z_0-9]*"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.type.signal.gdscript"
        },
        "2": {
          "name": "entity.name.function.siglan.gdscript"
        }
      }
    },
    {
      "match": "(?i:\\b(?:(onready)\\s+)?(var))\\s+([a-zA-Z_][a-zA-Z_0-9]*)",
      "captures": {
        "1": {
          "name": "keyword.other.onready.gdscript"
        },
        "2": {
          "name": "storage.type.var.gdscript"
        },
        "3": {
          "name": "variable.other.gdscript"
        }
      }
    },
    {
      "match": "\\b(?i:(const))\\s+([a-zA-Z_][a-zA-Z_0-9]*)",
      "captures": {
        "1": {
          "name": "storage.type.const.gdscript"
        },
        "2": {
          "name": "variable.other.gdscript"
        }
      }
    },
    {
      "name": "keyword.other.gdscript",
      "match": "\\b(?i:extends|assert|breakpoint)\\b"
    },
    {
      "name": "entity.other.inherited-class.gdscript",
      "match": "(?\u003c=extends)\\s+[a-zA-Z_][a-zA-Z_0-9]*(\\.([a-zA-Z_][a-zA-Z_0-9]*))?"
    },
    {
      "name": "constant.language.gdscript",
      "match": "\\b(?i:true|false|null)\\b"
    },
    {
      "name": "storage.modifier.static.gdscript",
      "match": "\\b(?i:export|tool)\\b"
    },
    {
      "match": "\\b((?i:setget))\\b\\s+(?:,?([a-zA-Z_][a-zA-Z_0-9]*)|([a-zA-Z_][a-zA-Z_0-9]*)\\s*,\\s*([a-zA-Z_][a-zA-Z_0-9]*))",
      "captures": {
        "1": {
          "name": "keyword.operator.setget.gdscript"
        },
        "2": {
          "name": "entity.name.function.gdscript"
        },
        "3": {
          "name": "entity.name.function.gdscript"
        },
        "4": {
          "name": "entity.name.function.gdscript"
        }
      }
    },
    {
      "name": "keyword.control.flow.yield.gdscript",
      "match": "\\b(?i:yield)\\b"
    },
    {
      "name": "invalid.illegal",
      "match": "\\b(?i:var|const|onready|class|func|signal)\\b"
    },
    {
      "name": "entity.name.type.class-type.gdscript",
      "match": "([A-Z][a-zA-Z_0-9]*)"
    },
    {
      "name": "entity.name.type.variant.gdscript",
      "match": "([a-z_][a-zA-Z_0-9]*)"
    },
    {
      "begin": "([a-z][a-zA-Z_0-9]*)\\s*\\(",
      "end": "\\)",
      "patterns": [
        {
          "name": "variable.parameter.gdscript",
          "match": "([a-zA-Z_][a-zA-Z_0-9]*)"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.reference.gdscript"
        }
      }
    }
  ]
}
