{
  "name": "Ballerina",
  "scopeName": "source.ballerina",
  "patterns": [
    {
      "name": "meta.package.ballerina",
      "match": "^\\s*(package)\\b(?:\\s*([^ ;$]+)\\s*(;)?)?",
      "captures": {
        "1": {
          "name": "keyword.other.package.ballerina"
        },
        "2": {
          "name": "storage.modifier.package.ballerina"
        },
        "3": {
          "name": "punctuation.terminator.ballerina"
        }
      }
    },
    {
      "name": "meta.import.ballerina",
      "match": "^\\s*(import)\\b(?:\\s*([^ ;$]+)\\s*(;)?)?",
      "captures": {
        "1": {
          "name": "keyword.other.import.ballerina"
        },
        "2": {
          "name": "storage.modifier.import.ballerina"
        },
        "3": {
          "name": "punctuation.terminator.ballerina"
        }
      }
    },
    {
      "include": "#code"
    }
  ],
  "repository": {
    "all-types": {
      "patterns": [
        {
          "include": "#primitive-arrays"
        },
        {
          "include": "#primitive-types"
        },
        {
          "include": "#reference-types"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "meta.declaration.annotation.ballerina",
          "begin": "(@[^(]+)(\\()",
          "end": "(\\))",
          "patterns": [
            {
              "match": "(\\w*)\\s*(=)",
              "captures": {
                "1": {
                  "name": "constant.other.key.ballerina"
                },
                "2": {
                  "name": "keyword.operator.assignment.ballerina"
                }
              }
            },
            {
              "include": "#code"
            },
            {
              "name": "punctuation.seperator.property.ballerina",
              "match": ","
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.annotation.ballerina"
            },
            "2": {
              "name": "punctuation.definition.annotation-arguments.begin.ballerina"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.annotation-arguments.end.ballerina"
            }
          }
        },
        {
          "name": "storage.type.annotation.ballerina",
          "match": "@\\w*"
        }
      ]
    },
    "anonymous-create": {
      "begin": "\\bcreate\\b",
      "end": "(?\u003c=\\)|\\])(?!\\s*{)|(?\u003c=})|(?=;)",
      "patterns": [
        {
          "begin": "(\\w+)\\s*(?=\\[)",
          "end": "}|(?=;|\\))",
          "patterns": [
            {
              "begin": "\\[",
              "end": "\\]",
              "patterns": [
                {
                  "include": "#code"
                }
              ]
            },
            {
              "begin": "{",
              "end": "(?=})",
              "patterns": [
                {
                  "include": "#code"
                }
              ]
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.ballerina"
            }
          }
        },
        {
          "begin": "(?=\\w.*\\()",
          "end": "(?\u003c=\\))",
          "patterns": [
            {
              "begin": "\\(",
              "end": "\\)",
              "patterns": [
                {
                  "include": "#code"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage.type.ballerina"
                }
              }
            }
          ]
        },
        {
          "name": "meta.inner-service.ballerina",
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "include": "#service-declaration"
            }
          ]
        }
      ],
      "beginCaptures": {
        "0": {
          "name": "keyword.control.new.ballerina"
        }
      }
    },
    "code": {
      "patterns": [
        {
          "include": "#comments-inline"
        },
        {
          "include": "#service"
        },
        {
          "include": "#anonymous-create"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#annotations"
        },
        {
          "include": "#all-types"
        },
        {
          "include": "#methods"
        }
      ]
    },
    "comments-inline": {
      "patterns": [
        {
          "name": "comment.block.ballerina",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.ballerina"
            }
          }
        },
        {
          "match": "\\s*((//).*$\\n?)",
          "captures": {
            "1": {
              "name": "comment.line.double-slash.ballerina"
            },
            "2": {
              "name": "punctuation.definition.comment.ballerina"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.constant.ballerina",
          "match": "\\b(const)\\b"
        },
        {
          "name": "keyword.control.catch-exception.ballerina",
          "match": "\\b(try|catch|throw)\\b"
        },
        {
          "name": "keyword.control.ballerina",
          "match": "\\?|:"
        },
        {
          "name": "keyword.control.ballerina",
          "match": "\\b(return|reply|break|while|iterate|if|else|fork|join|timeout)\\b"
        },
        {
          "name": "keyword.operator.comparison.ballerina",
          "match": "(==|!=|\u003c=|\u003e=|\u003c\u003e|\u003c|\u003e)"
        },
        {
          "name": "keyword.operator.assignment.ballerina",
          "match": "(=)"
        },
        {
          "name": "keyword.operator.increment-decrement.ballerina",
          "match": "(\\-\\-|\\+\\+)"
        },
        {
          "name": "keyword.operator.arithmetic.ballerina",
          "match": "(\\-|\\+|\\*|\\/|%)"
        },
        {
          "name": "keyword.operator.logical.ballerina",
          "match": "(!|\u0026\u0026|\\|\\|)"
        },
        {
          "name": "keyword.operator.dereference.ballerina",
          "match": "(?\u003c=\\S)\\.(?=\\S)"
        },
        {
          "name": "punctuation.terminator.ballerina",
          "match": ";"
        }
      ]
    },
    "methods": {
      "name": "meta.method.ballerina",
      "begin": "(?=\\w.*\\s+)(?=[^=]+\\()",
      "end": "}|(?=;)",
      "patterns": [
        {
          "include": "#storage-modifiers"
        },
        {
          "name": "meta.method.identifier.ballerina",
          "begin": "(\\w+)\\s*\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#parameters"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.ballerina"
            }
          }
        }
      ]
    },
    "primitive-arrays": {
      "patterns": [
        {
          "name": "storage.type.primitive.array.ballerina",
          "match": "\\b(?:string|int)(\\[\\])*\\b"
        }
      ]
    },
    "primitive-types": {
      "patterns": [
        {
          "name": "storage.type.primitive.ballerina",
          "match": "\\b(?:boolean|int|float|long|double|string)\\b"
        }
      ]
    },
    "reference-types": {
      "patterns": [
        {
          "name": "storage.type.primitive.ballerina",
          "match": "\\b(?:message|map|exception|xml|xmldocument|json|struct|array)\\b"
        }
      ]
    },
    "service": {
      "name": "meta.service.ballerina",
      "begin": "(?=\\w?[\\w\\s]*(?:service|(?:@)?resource|function|connector|action|worker)\\s+\\w+)",
      "end": "}",
      "patterns": [
        {
          "include": "#storage-modifiers"
        },
        {
          "include": "#comments-inline"
        },
        {
          "name": "meta.service.identifier.ballerina",
          "match": "(\\bservice|(?:@)?\\bresource|\\bfunction|\\bconnector|\\baction|\\bworker)\\s+(\\w+)",
          "captures": {
            "1": {
              "name": "storage.modifier.ballerina"
            },
            "2": {
              "name": "entity.name.type.service.ballerina"
            }
          }
        },
        {
          "name": "meta.service.body.ballerina",
          "begin": "{",
          "end": "(?=})",
          "patterns": [
            {
              "include": "#service-declaration"
            }
          ]
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.section.service.end.ballerina"
        }
      }
    },
    "service-declaration": {
      "patterns": [
        {
          "include": "#comments-inline"
        },
        {
          "include": "#service"
        },
        {
          "include": "#methods"
        },
        {
          "include": "#annotations"
        },
        {
          "include": "#storage-modifiers"
        },
        {
          "include": "#code"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ballerina",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ballerina",
              "match": "\\\\."
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.ballerina"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.ballerina"
            }
          }
        },
        {
          "name": "string.quoted.single.ballerina",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.ballerina",
              "match": "\\\\."
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.ballerina"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.ballerina"
            }
          }
        }
      ]
    }
  }
}
