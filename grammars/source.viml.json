{
  "name": "VimL",
  "scopeName": "source.viml",
  "fileTypes": [
    "vim",
    "vimrc",
    "gvimrc",
    "nvimrc",
    "_vimrc"
  ],
  "firstLineMatch": "(?x)\n\n# Hashbang\n^\\#!.*(?:\\s|\\/|(?<=!)\\b)\n\t(?:vim|nvim)\n(?:$|\\s)\n\n|\n\n# Modeline\n(?i:\n\t# Vim/Vi modeline, accounting for all possible variations\n\t(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s* set?\\s))\n\t(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:]\n\t(?:filetype|ft|syntax)\\s*=\n\t\tvim\n\t(?=\\s|:|$)\n\t\n\t|\n\t\n\t# Emacs modeline, assuming a major mode for VimScript even exists\n\t-\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)\n\t\t(?:Vim|VimL|VimScript)\n\t(?=[\\s;]|(?<![-*])-\\*-).*?-\\*-\n)",
  "foldingStartMarker": "^(?:if|while|for|fu|function|augroup|aug)",
  "foldingStopMarker": "(?:endif|endwhile|endfor|endf|endfunction|augroup\\.END|aug\\.END)$",
  "patterns": [
    {
      "include": "#main"
    }
  ],
  "repository": {
    "main": {
      "patterns": [
        {
          "include": "#vimTodo"
        },
        {
          "include": "#folds"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#modelines"
        },
        {
          "include": "#pathname"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#hashbang"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#syntax"
        },
        {
          "include": "#highlightLink"
        },
        {
          "include": "#funcDef"
        },
        {
          "include": "#augGroup"
        },
        {
          "include": "#parameter"
        },
        {
          "include": "#expr"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#register"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#supportType"
        },
        {
          "include": "#supportVariable"
        },
        {
          "include": "#extraVimFunc"
        },
        {
          "include": "#keywordLists"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.viml",
          "match": "(\")(?:\\\\\\\\|\\\\\"|[^\\n\"])*(\")",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.viml"
            },
            "2": {
              "name": "punctuation.definition.string.end.viml"
            }
          }
        },
        {
          "name": "string.quoted.single.viml",
          "match": "(')(?:''|[^\\n'])*(')",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.viml"
            },
            "2": {
              "name": "punctuation.definition.string.end.viml"
            }
          }
        },
        {
          "name": "string.regexp.interpolated.viml",
          "match": "(/)(?:\\\\\\\\|\\\\/|[^\\n/])*(/)",
          "captures": {
            "1": {
              "name": "punctuation.section.regexp.begin.viml"
            },
            "2": {
              "name": "punctuation.section.regexp.end.viml"
            }
          }
        }
      ]
    },
    "pathname": {
      "name": "constant.pathname.viml",
      "begin": "~/",
      "end": "(?=\\s)"
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.quotes.viml",
          "begin": "^\\s*(\")(?=(\\s*[A-Z]\\w+)+:)",
          "end": "((:))(.*)$",
          "contentName": "support.constant.field.viml",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.viml"
            }
          },
          "endCaptures": {
            "1": {
              "name": "support.constant.field.viml"
            },
            "2": {
              "name": "punctuation.separator.key-value.colon.viml"
            },
            "3": {
              "patterns": [
                {
                  "include": "#commentInnards"
                }
              ]
            }
          }
        },
        {
          "name": "comment.line.quotes.viml",
          "begin": "^\\s*(\")",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.viml"
            }
          },
          "patterns": [
            {
              "include": "#commentInnards"
            }
          ]
        },
        {
          "name": "comment.inline.quotes.viml",
          "patterns": [
            {
              "include": "#commentInnards"
            }
          ],
          "begin": "(?<!^)\\s*(\")(?=[^\\n\"]*$)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.viml"
            }
          }
        }
      ]
    },
    "commentInnards": {
      "patterns": [
        {
          "include": "#modelines"
        },
        {
          "include": "#folds"
        },
        {
          "include": "#todo"
        }
      ]
    },
    "modelines": {
      "patterns": [
        {
          "name": "string.other.modeline.viml",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "begin": "(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|[\\t\\x20]ex):\\s*(?=set?\\s)",
          "end": ":|$"
        },
        {
          "name": "string.other.modeline.viml",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "begin": "(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|[\\t\\x20]ex):",
          "end": "$"
        }
      ]
    },
    "folds": {
      "name": "entity.name.fold.heading.viml",
      "match": "(?<=\").*?{{{\\d*|(?<=\")\\s*}}}"
    },
    "hashbang": {
      "name": "comment.line.shebang.viml",
      "begin": "\\A#!",
      "end": "$",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.shebang.viml"
        }
      }
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.viml",
          "match": "(?:#|0[xX])[0-9A-Fa-f]+"
        },
        {
          "name": "constant.numeric.float.exponential.viml",
          "match": "(?<!\\w)-?\\d+\\.\\d+[eE][-+]?\\d+"
        },
        {
          "name": "constant.numeric.float.viml",
          "match": "(?<!\\w)-?\\d+\\.\\d+"
        },
        {
          "name": "constant.numeric.integer.viml",
          "match": "(?<!\\w)-?\\d+"
        }
      ]
    },
    "funcDef": {
      "patterns": [
        {
          "name": "storage.function.viml",
          "match": "\\b(fu(n|nction)?|end(f|fu|fun|function)?)\\b"
        },
        {
          "name": "entity.name.function.viml",
          "match": "(?:([sSgGbBwWtTlL]?(:))?[\\w#]+)(?=\\()",
          "captures": {
            "1": {
              "name": "storage.modifier.scope.viml"
            },
            "2": {
              "name": "punctuation.definition.scope.key-value.viml"
            }
          }
        },
        {
          "name": "storage.modifier.$1.function.viml",
          "match": "(?<=\\)|\\s)(abort|dict)(?=\\s|$)"
        }
      ]
    },
    "augGroup": {
      "patterns": [
        {
          "name": "meta.define-$1.viml",
          "begin": "\\b(aug|augroup)\\b\\s*([\\w#]+)",
          "end": "\\b(\\1)\\s+(END)\\b",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.function.viml"
            },
            "2": {
              "name": "entity.name.function.viml"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage.function.viml"
            },
            "2": {
              "name": "keyword.control.end"
            }
          }
        }
      ]
    },
    "parameter": {
      "name": "meta.parameter.viml",
      "match": "(-)(\\w+)(=)",
      "captures": {
        "1": {
          "name": "punctuation.definition.parameter.viml"
        },
        "2": {
          "name": "entity.name.parameter.viml"
        },
        "3": {
          "name": "punctuation.assignment.parameter.viml"
        }
      }
    },
    "expr": {
      "patterns": [
        {
          "name": "keyword.operator.logical.viml",
          "match": "[&|=]{2}[?#]?|[!><]=[#?]?|[=!]~(?!\\/)[#?]?|[><][#?*]|\\b(?:isnot|is)\\b|\\\\|[-+%*]"
        },
        {
          "match": "\\s[><]\\s",
          "name": "keyword.operator.logical.viml"
        },
        {
          "match": "(?<=\\S)!",
          "name": "storage.modifier.force.viml"
        },
        {
          "match": "!(?=\\S)",
          "name": "keyword.operator.logical.not.viml"
        },
        {
          "match": "{",
          "name": "punctuation.expression.bracket.curly.begin.viml"
        },
        {
          "match": "}",
          "name": "punctuation.expression.bracket.curly.end.viml"
        },
        {
          "match": "\\[",
          "name": "punctuation.expression.bracket.square.begin.viml"
        },
        {
          "match": "\\]",
          "name": "punctuation.expression.bracket.square.end.viml"
        },
        {
          "match": "\\(",
          "name": "punctuation.expression.bracket.round.begin.viml"
        },
        {
          "match": "\\)",
          "name": "punctuation.expression.bracket.round.end.viml"
        },
        {
          "match": "\\|",
          "name": "punctuation.separator.statement.viml"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.viml"
        },
        {
          "match": ":",
          "name": "punctuation.separator.colon.viml"
        },
        {
          "match": "[-+.]?=",
          "name": "keyword.operator.assignment.viml"
        },
        {
          "match": "\\.{3}",
          "name": "keyword.operator.rest.viml"
        },
        {
          "match": "\\.",
          "name": "punctuation.delimiter.property.dot.viml"
        },
        {
          "match": "&(?=\\w+)",
          "name": "punctuation.definition.option.viml"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.control.$1.viml",
          "match": "\\b(if|while|for|return|try|catch|finally|end(if|for|while|try)?|else(if)?|do|in|:)\\b"
        },
        {
          "name": "keyword.operator.$1.viml",
          "match": "\\b(unlet)\\b"
        },
        {
          "name": "storage.type.let.viml",
          "match": "\\blet\\b"
        }
      ]
    },
    "register": {
      "name": "variable.other.register.viml",
      "match": "(@)([-\"A-Za-z\\d:.%#=*+~_/])",
      "captures": {
        "1": {
          "name": "punctuation.definition.register.viml"
        }
      }
    },
    "variable": {
      "patterns": [
        {
          "name": "variable.language.self.viml",
          "match": "\\b(self)\\b"
        },
        {
          "name": "support.variable.environment.viml",
          "match": "(\\$)\\w+",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable.viml"
            }
          }
        },
        {
          "name": "variable.other.viml",
          "match": "(&?)(?:([sSgGbBwWlLaAvV](:))|[@$]|&(?!&))\\w*",
          "captures": {
            "1": {
              "name": "punctuation.definition.reference.viml"
            },
            "2": {
              "name": "storage.modifier.scope.viml"
            },
            "3": {
              "name": "punctuation.definition.scope.key-value.viml"
            }
          }
        }
      ]
    },
    "supportType": {
      "name": "support.type.viml",
      "match": "(<).*?(>)",
      "captures": {
        "1": {
          "name": "punctuation.definition.bracket.angle.begin.viml"
        },
        "2": {
          "name": "punctuation.definition.bracket.angle.end.viml"
        }
      }
    },
    "supportVariable": {
      "name": "support.variable.viml",
      "match": "\\b(?:am(?:enu)?|(?:hl|inc)?search|[Bb]uf(?:[Nn]ew[Ff]ile|[Rr]ead)?|[Ff]ile[Tt]ype)\\b"
    },
    "highlightLink": {
      "match": "(?x)^\\s* (:)? \\s*              (?# 1: punctuation.separator.key-value.colon.viml) (hi|highlight)         (?# 2: support.function.highlight.viml) (!)?                   (?# 3: storage.modifier.force.viml) (?:\\s+(def|default))? (?# 4: support.function.highlight-default.viml) (?:\\s+(link))         (?# 5: support.function.highlight-link.viml) (?:\\s+([-\\w]+))      (?# 6: variable.parameter.group-name.viml) (?:\\s+(?:(NONE)|([-\\w]+)))?",
      "captures": {
        "1": {
          "name": "punctuation.separator.key-value.colon.viml"
        },
        "2": {
          "name": "support.function.highlight.viml"
        },
        "3": {
          "name": "storage.modifier.force.viml"
        },
        "4": {
          "name": "support.function.highlight-default.viml"
        },
        "5": {
          "name": "support.function.highlight-link.viml"
        },
        "6": {
          "name": "variable.parameter.group-name.viml"
        },
        "7": {
          "name": "support.constant.highlighting.viml"
        },
        "8": {
          "name": "variable.parameter.group-name.viml"
        }
      }
    },
    "syntax": {
      "name": "meta.syntax-item.viml",
      "begin": "^\\s*(:)?\\s*(syntax|syn?)(?=\\s|$)",
      "end": "$",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.key-value.colon.viml"
        },
        "2": {
          "name": "support.function.syntax-item.viml"
        }
      },
      "patterns": [
        {
          "match": "\\G\\s+(case)(?:\\s+(match|ignore))?(?=\\s|$)",
          "captures": {
            "1": {
              "name": "support.function.syntax-case.viml"
            },
            "2": {
              "name": "support.constant.$2-case.viml"
            }
          }
        },
        {
          "match": "\\G\\s+(spell)(?:\\s+(toplevel|notoplevel|default))?(?=\\s|$)",
          "captures": {
            "1": {
              "name": "support.function.syntax-spellcheck.viml"
            },
            "2": {
              "name": "support.constant.$2-checking.viml"
            }
          }
        },
        {
          "begin": "\\G\\s+(keyword)(?:\\s+([-\\w]+))?",
          "end": "(?=$)",
          "beginCaptures": {
            "1": {
              "name": "support.function.syntax-keywords.viml"
            },
            "2": {
              "name": "variable.parameter.group-name.viml"
            }
          },
          "contentName": "keyword.other.syntax-definition.viml",
          "patterns": [
            {
              "include": "#syntaxOptions"
            },
            {
              "include": "#expr"
            }
          ]
        },
        {
          "begin": "\\G\\s+(match)(?:\\s+([-\\w]+))?\\s*",
          "end": "(?=$)",
          "beginCaptures": {
            "1": {
              "name": "support.function.syntax-match.viml"
            },
            "2": {
              "name": "variable.parameter.group-name.viml"
            }
          },
          "patterns": [
            {
              "include": "#syntaxRegex"
            }
          ]
        },
        {
          "begin": "\\G\\s+(region)(?:\\s+([-\\w]+))?",
          "end": "(?=$)",
          "beginCaptures": {
            "1": {
              "name": "support.function.syntax-region.viml"
            },
            "2": {
              "name": "variable.parameter.group-name.viml"
            }
          },
          "patterns": [
            {
              "include": "#syntaxOptions"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "\\G\\s+(cluster)(?:\\s+([-\\w]+))?(?=\\s|$)",
          "end": "(?=$)",
          "beginCaptures": {
            "1": {
              "name": "support.function.syntax-cluster.viml"
            },
            "2": {
              "name": "variable.parameter.group-name.viml"
            }
          },
          "patterns": [
            {
              "include": "#syntaxOptions"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "match": "\\G\\s+(conceal)(?:\\s+(on|off)(?=\\s|$))?",
          "captures": {
            "1": {
              "name": "support.function.syntax-conceal.viml"
            },
            "2": {
              "name": "support.constant.boolean.$2.viml"
            }
          }
        },
        {
          "match": "\\G\\s+(include)(?:\\s+((@)?[-\\w]+))?(?:\\s+(\\S+))?",
          "captures": {
            "1": {
              "name": "support.function.syntax-include.viml"
            },
            "2": {
              "name": "variable.parameter.group-name.viml"
            },
            "3": {
              "name": "punctuation.definition.group-reference.viml"
            },
            "4": {
              "name": "string.unquoted.filename.viml",
              "patterns": [
                {
                  "include": "#supportType"
                }
              ]
            }
          }
        },
        {
          "begin": "\\G\\s+(sync)(?=\\s|$)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "support.function.syntax-sync.viml"
            }
          },
          "patterns": [
            {
              "match": "\\G\\s+(fromstart)(?=\\s|$)",
              "captures": {
                "1": {
                  "name": "support.constant.sync-$1.viml"
                }
              }
            },
            {
              "match": "\\G\\s+(ccomment|clear)(?:\\s+(?![-\\w]+\\s*=)([-\\w]+))?",
              "captures": {
                "1": {
                  "name": "support.constant.sync-$1.viml"
                },
                "2": {
                  "name": "variable.parameter.group-name.viml"
                }
              }
            },
            {
              "match": "\\G\\s+(minlines|lines)\\s*(=)(\\d*)",
              "captures": {
                "1": {
                  "name": "support.constant.sync-mode.viml"
                },
                "2": {
                  "name": "punctuation.assignment.parameter.viml"
                },
                "3": {
                  "name": "constant.numeric.integer.viml"
                }
              }
            },
            {
              "match": "(?x)\\G\\s+(match|region)(?:\\s+(?![-\\w]+\\s*=)([-\\w]+))?",
              "captures": {
                "1": {
                  "name": "support.constant.sync-mode.viml"
                },
                "2": {
                  "name": "variable.parameter.group-name.viml"
                },
                "3": {
                  "name": "support.constant.sync-mode-location.viml"
                }
              }
            },
            {
              "begin": "(?<=\\s)(groupt?here|linecont)(?:\\s+(?![-\\w]+\\s*=)([-\\w]+))?(?=\\s|$)",
              "end": "(?=$)",
              "beginCaptures": {
                "1": {
                  "name": "support.constant.sync-match.viml"
                },
                "2": {
                  "name": "variable.parameter.group-name.viml"
                }
              },
              "patterns": [
                {
                  "include": "#syntaxRegex"
                }
              ]
            },
            {
              "include": "#syntaxOptions"
            }
          ]
        },
        {
          "include": "$self"
        }
      ]
    },
    "syntaxOptions": {
      "patterns": [
        {
          "name": "meta.syntax-item.pattern-argument.viml",
          "begin": "(?<=\\s)(start|skip|end)(?:\\s*(=))",
          "end": "(?=$|\\s)",
          "beginCaptures": {
            "1": {
              "name": "support.constant.$1-pattern.viml"
            },
            "2": {
              "name": "punctuation.assignment.parameter.viml"
            }
          },
          "patterns": [
            {
              "include": "#regex"
            }
          ]
        },
        {
          "name": "meta.syntax-item.argument.viml",
          "match": "(?x)(?<=\\s)\n((?:matchgroup|contains|containedin|nextgroup|add|remove|minlines|linebreaks|maxlines)(?=\\s*=)\n|(?:cchar|conceal|concealends|contained|display|excludenl|extend|fold|keepend|oneline|skipempty|skipnl|skipwhite|transparent))\n(?:(?=$|\\s)|\\s*(=)(\\S*)?)",
          "captures": {
            "1": {
              "name": "support.constant.syntax-$1.viml"
            },
            "2": {
              "name": "punctuation.assignment.parameter.viml"
            },
            "3": {
              "name": "string.unquoted.syntax-option.viml",
              "patterns": [
                {
                  "include": "#numbers"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.viml"
                },
                {
                  "match": "@",
                  "name": "punctuation.definition.group-reference.viml"
                }
              ]
            }
          }
        }
      ]
    },
    "syntaxRegex": {
      "patterns": [
        {
          "include": "#syntaxOptions"
        },
        {
          "name": "string.regexp.viml",
          "begin": "(?<=\\s)(\\S)",
          "end": "(?:(\\1)(\\S*)(.*))?$",
          "patterns": [
            {
              "include": "#regexInnards"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.viml"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.viml"
            },
            "2": {
              "patterns": [
                {
                  "include": "#regexOffset"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#syntaxOptions"
                },
                {
                  "include": "$self"
                }
              ]
            }
          }
        }
      ]
    },
    "regex": {
      "name": "string.regexp.viml",
      "begin": "(?<=\\s|=)(\\S)",
      "end": "$|(\\1)(\\S*)",
      "patterns": [
        {
          "include": "#regexInnards"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin.viml"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.viml"
        },
        "2": {
          "patterns": [
            {
              "include": "#regexOffset"
            }
          ]
        }
      }
    },
    "regexOffset": {
      "name": "meta.pattern-offset.viml",
      "match": "(ms|me|hs|he|rs|re|lc)(=)(?:(\\d+)|([se])(?:([-+])(\\d+))?)(,)?",
      "captures": {
        "1": {
          "name": "constant.language.pattern-offset.viml"
        },
        "2": {
          "name": "punctuation.assignment.parameter.viml"
        },
        "3": {
          "name": "constant.numeric.integer.viml"
        },
        "4": {
          "name": "constant.language.pattern-position.viml"
        },
        "5": {
          "name": "keyword.operator.arithmetic.viml"
        },
        "6": {
          "name": "constant.numeric.integer.viml"
        },
        "7": {
          "name": "punctuation.separator.comma.viml"
        }
      }
    },
    "regexInnards": {
      "patterns": [
        {
          "begin": "\\[",
          "end": "\\]|$",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.character-class.begin.viml"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.character-class.end.viml"
            }
          },
          "patterns": [
            {
              "include": "#regexInnards"
            }
          ]
        },
        {
          "name": "constant.character.escape.viml",
          "match": "(\\\\).",
          "captures": {
            "1": {
              "name": "punctuation.definition.backslash.escape.viml"
            }
          }
        }
      ]
    },
    "extraVimFunc": {
      "name": "support.function.viml",
      "match": "(?x)\\b\n\t(execute|Plugin|autocmd|[cinvo]?(?:un|nore)?(?:map|menu)|(?:range)?go(?:to)?|(?:count)?(?:pop?|tag?|tn(?:ext)?|tp(?:revious)?|tr(?:ewind)?)\n\t|(?:range)?(?:s(?:ubstitute)?|ret(?:ab)?|g(?:lobal)?)|unm(?:ap)?|map_l|mapc(?:lear)?|N?buffer|N?bnext|N?bNext|N?bprevious|N?bmod\n\t|ab(?:breviate)?|norea(?:bbrev)?|[ic](?:un|nore)?ab|split_f|rangefold|[ic](?:un|nore)?ab|[ic]abbrev|edit_f|next_f\n\t|(?:range)?(?:w(?:rite)?|up(?:date)?)|sar)\n\\b"
    },
    "keywordLists": {
      "patterns": [
        {
          "include": "#vimTodo"
        },
        {
          "include": "#vimAugroupKey"
        },
        {
          "include": "#vimAutoEvent"
        },
        {
          "include": "#vimBehaveModel"
        },
        {
          "include": "#vimCommand"
        },
        {
          "include": "#vimFTCmd"
        },
        {
          "include": "#vimFTOption"
        },
        {
          "include": "#vimFgBgAttrib"
        },
        {
          "include": "#vimFuncKey"
        },
        {
          "include": "#vimFuncName"
        },
        {
          "include": "#vimGroup"
        },
        {
          "include": "#vimGroupSpecial"
        },
        {
          "include": "#vimHLGroup"
        },
        {
          "include": "#vimHiAttrib"
        },
        {
          "include": "#vimHiClear"
        },
        {
          "include": "#vimHiCtermColor"
        },
        {
          "include": "#vimMapModKey"
        },
        {
          "include": "#vimOption"
        },
        {
          "include": "#vimPattern"
        },
        {
          "include": "#vimStdPlugin"
        },
        {
          "include": "#vimSynCase"
        },
        {
          "include": "#vimSynType"
        },
        {
          "include": "#vimSyncC"
        },
        {
          "include": "#vimSyncLinecont"
        },
        {
          "include": "#vimSyncMatch"
        },
        {
          "include": "#vimSyncNone"
        },
        {
          "include": "#vimSyncRegion"
        },
        {
          "include": "#vimUserAttrbCmplt"
        },
        {
          "include": "#vimUserAttrbKey"
        },
        {
          "include": "#vimUserCommand"
        },
        {
          "include": "#vimErrSetting"
        }
      ]
    },
    "vimTodo": {
      "name": "support.constant.${1:/downcase}.viml",
      "match": "\\b(COMBAK|FIXME|TODO|XXX)\\b"
    },
    "vimAugroupKey": {
      "name": "support.function.vimAugroupKey.viml",
      "match": "\\b(aug|augroup)\\b"
    },
    "vimAutoEvent": {
      "name": "support.function.auto-event.viml",
      "match": "(?i)\\b(BufAdd|BufCreate|BufDelete|BufEnter|BufFilePost|BufFilePre|BufHidden|BufLeave|BufNew|BufNewFile|BufRead|BufReadCmd|BufReadPost|BufReadPre|BufUnload|BufWinEnter|BufWinLeave|BufWipeout|BufWrite|BufWriteCmd|BufWritePost|BufWritePre|CmdUndefined|CmdwinEnter|CmdwinLeave|ColorScheme|CompleteDone|CursorHold|CursorHoldI|CursorMoved|CursorMovedI|EncodingChanged|FileAppendCmd|FileAppendPost|FileAppendPre|FileChangedRO|FileChangedShell|FileChangedShellPost|FileEncoding|FileReadCmd|FileReadPost|FileReadPre|FileType|FileWriteCmd|FileWritePost|FileWritePre|FilterReadPost|FilterReadPre|FilterWritePost|FilterWritePre|FocusGained|FocusLost|FuncUndefined|GUIEnter|GUIFailed|InsertChange|InsertCharPre|InsertEnter|InsertLeave|MenuPopup|OptionSet|QuickFixCmdPost|QuickFixCmdPre|QuitPre|RemoteReply|SessionLoadPost|ShellCmdPost|ShellFilterPost|SourceCmd|SourcePre|SpellFileMissing|StdinReadPost|StdinReadPre|SwapExists|Syntax|TabClosed|TabEnter|TabLeave|TabNew|TermChanged|TermResponse|TextChanged|TextChangedI|User|VimEnter|VimLeave|VimLeavePre|VimResized|WinEnter|WinLeave|WinNew)\\b"
    },
    "vimBehaveModel": {
      "name": "support.function.vimBehaveModel.viml",
      "match": "\\b(mswin|xterm)\\b"
    },
    "vimCommand": {
      "name": "support.function.command.viml",
      "match": "\\b(a|abc|abclear|abo|aboveleft|all?|ar|args|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|argu|argument|as|ascii|au|b|buffer|ba|ball|badd?|bd|bdelete|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|br|brewind|break?|breaka|breakadd|breakd|breakdel|breakl|breaklist|bro|browse|bufdo|buffers|bun|bunload|bw|bwipeout|c|change|cabc|cabclear|cad|caddbuffer|cadde|caddexpr|caddf|caddfile|call?|cat|catch|cb|cbuffer|cbo|cbottom|cc|ccl|cclose|cd|cdo|ce|center|cex|cexpr|cf|cfile|cfdo|cfir|cfirst|cg|cgetfile|cgetb|cgetbuffer|cgete|cgetexpr|changes|chd|chdir|che|checkpath|checkt|checktime|chi|chistory|cl|clist|cla|clast|cle|clearjumps|clo|close|cmapc|cmapclear|cn|cnext|cN|cNext|cnew|cnewer|cnf|cnfile|cNf|cNfile|co|copy|col|colder|colo|colorscheme|com|comc|comclear|comp|compiler|con|continue|conf|confirm|copen?|cp|cprevious|cpf|cpfile|cq|cquit|cr|crewind|cs|cscope|cstag|cuna|cunabbrev|cw|cwindow|d|delete|debug|debugg|debuggreedy|delc|delcommand|delel|delep|deletel|deletep|deletl|deletp|delf|delfunction|dell|delm|delmarks|delp|dep|di|display|dif|diffupdate|diffg|diffget|diffo|diffoff|diffp|diffpatch|diffput?|diffs|diffsplit|difft|diffthis|dig|digraphs|dir|dj|djump|dl|dli|dlist|do|doau|dp|dr|drop|ds|dsearch|dsp|dsplit|e|edit|ea|earlier|echoe|echoerr|echom|echomsg|echon|el|else|elseif?|em|emenu|en|endif|endf|endfunction|endfor?|endt|endtry|endw|endwhile|enew?|ex|exit?|exu|exusage|f|file|files|filet|filetype|filt|filter|find?|fina|finally|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|foldd|folddoopen|folddoc|folddoclosed|foldo|foldopen|for|fu|function|g|go|goto|gr|grep|grepa|grepadd|gui|gvim|h|help|ha|hardcopy|helpc|helpclose|helpf|helpfind|helpg|helpgrep|helpt|helptags|hi|hide?|his|history|i|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|intro|is|isearch|isp|isplit|iuna|iunabbrev|j|join|ju|jumps|k|kee|keepmarks|keepa|keepalt|keepj|keepjumps|keepp|keeppatterns|l|list|la|last|lad|laddexpr|laddb|laddbuffer|laddf|laddfile|lan|language|lat|later|lb|lbuffer|lbo|lbottom|lcd?|lch|lchdir|lcl|lclose|lcs|lcscope|ldo?|le|left|lefta|leftabove|lex|lexpr|lf|lfile|lfdo|lfir|lfirst|lg|lgetfile|lgetb|lgetbuffer|lgete|lgetexpr|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|lhi|lhistory|ll|lla|llast|lli|llist|lmake?|lmapc|lmapclear|lN|lNext|lne|lnext|lnew|lnewer|lnf|lnfile|lNf|lNfile|lo|loadview|loadk|loadkeymap|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lp|lprevious|lpf|lpfile|lr|lrewind|ls|lt|ltag|lua|luado|luafile|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|m|move|ma|mark|make?|marks|mat|match|menut|menutranslate|mes|messages|mk|mkexrc|mks|mksession|mksp|mkspell|mkv|mkvimrc|mkview?|mode?|mz|mzscheme|mzf|mzfile|n|next|nb|nbkey|nbc|nbclose|nbs|nbstart|new|nmapc|nmapclear|noa|noautocmd|noh|nohlsearch|nor|nore|nos|noswapfile|nu|number|o|open|ol|oldfiles|omapc|omapclear|on|only|opt|options|ownsyntax|p|print|pa|packadd|packl|packloadall|pc|pclose|pe|perl|ped|pedit|perldo?|pop?|popup?|pp|ppop|pre|preserve|prev|previous|pro|prof|profile|profd|profdel|promptf|promptfind|promptr|promptrepl|ps|psearch|ptag?|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|put?|pwd?|py|python|py3|py3do|pydo|pyf|pyfile|python3|q|quit|qa|qall|quita|quitall|r|read|rec|recover|redo?|redir?|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|ru|runtime|ruby?|rubydo?|rubyf|rubyfile|rundo|rv|rviminfo|sa|sargument|sall?|san|sandbox|sav|saveas|sb|sbuffer|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sc|sce|scg|sci|scI|scl|scp|scr|scriptnames|scripte|scriptencoding|scs|scscope|set?|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sg|sgc|sge|sgi|sgI|sgl|sgn|sgp|sgr|sh|shell|si|sI|sic|sIc|sie|sIe|sig|sIg|sign|sIl|sil|silent|sim|simalt|sin|sIn|sip|sIp|sir|sIr|sl|sleep|sla|slast|sm|smagic|sm|smap|sme|smenu|smile|sn|snext|sN|sNext|sno|snomagic|snoreme|snoremenu|so|source|sort?|sp|split|spe|spellgood|spelld|spelldump|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|spr|sprevious|sr|src|sre|srewind|srg|sri|srI|srl|srn|srp|st|stop|stag?|star|startinsert|startg|startgreplace|startr|startreplace|stj|stjump|stopi|stopinsert|sts|stselect|sun|sunhide|sunme|sunmenu|sus|suspend|sv|sview|sw|swapname|sy|syn|sync|syncbind|syntime|t|tag?|tab|tabc|tabclose|tabdo?|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabn|tabnext|tabN|tabNext|tabnew|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|tags|tcl?|tcldo?|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|u|undo|una|unabbreviate|undoj|undojoin|undol|undolist|unh|unhide|unlo|unlockvar|uns|unsilent|up|update|v|ve|version|verb|verbose|vert|vertical|vi|visual|view?|vim|vimgrep|vimgrepa|vimgrepadd|viu|viusage|vmapc|vmapclear|vnew?|vs|vsplit|w|write|wa|wall|wh|while|win|winsize|winc|wincmd|windo|winp|winpos|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|ws|wsverb|wundo|wv|wviminfo|x|xit|xa|xall|xmapc|xmapclear|xme|xmenu|xnoreme|xnoremenu|xprop|xunme|xunmenu|xwininfo|y|yank)\\b"
    },
    "vimErrSetting": {
      "name": "invalid.deprecated.legacy-setting.viml",
      "match": "\\b(autoprint|beautify|biosk|bioskey|consk|conskey|flash|graphic|hardtabs|ht|mesg|noautoprint|nobeautify|nobiosk|nobioskey|noconsk|noconskey|noflash|nographic|nohardtabs|nomesg|nonovice|noop|noopen|nooptimize|noredraw|noslow|noslowopen|nosourceany|novice|now1200|now300|now9600|op|open|optimize|redraw|slow|slowopen|sourceany|w1200|w300|w9600)\\b"
    },
    "vimFTCmd": {
      "name": "support.function.vimFTCmd.viml",
      "match": "\\b(filet|filetype)\\b"
    },
    "vimFTOption": {
      "name": "support.function.vimFTOption.viml",
      "match": "\\b(detect|indent|off|on|plugin)\\b"
    },
    "vimFgBgAttrib": {
      "name": "support.constant.attribute.viml",
      "match": "\\b(background|bg|fg|foreground|none)\\b"
    },
    "vimFuncKey": {
      "name": "support.function.vimFuncKey.viml",
      "match": "\\b(fu|function)\\b"
    },
    "vimFuncName": {
      "name": "support.function.viml",
      "match": "\\b(abs|acos|add|and|append|argc|argidx|arglistid|argv|asin|assert_equal|assert_exception|assert_fails|assert_false|assert_inrange|assert_match|assert_notequal|assert_notmatch|assert_true|atan|atan2|browse|browsedir|bufexists|buflisted|bufloaded|bufname|bufnr|bufwinid|bufwinnr|byte2line|byteidx|byteidxcomp|call|ceil|ch_close|ch_close_in|ch_evalexpr|ch_evalraw|ch_getbufnr|ch_getjob|ch_info|ch_log|ch_logfile|ch_open|ch_read|ch_readraw|ch_sendexpr|ch_sendraw|ch_setoptions|ch_status|changenr|char2nr|cindent|clearmatches|col|complete|complete_add|complete_check|confirm|copy|cos|cosh|count|cscope_connection|cursor|deepcopy|delete|did_filetype|diff_filler|diff_hlID|empty|escape|eval|eventhandler|executable|execute|exepath|exists|exp|expand|extend|feedkeys|filereadable|filewritable|filter|finddir|findfile|float2nr|floor|fmod|fnameescape|fnamemodify|foldclosed|foldclosedend|foldlevel|foldtext|foldtextresult|foreground|funcref|function|garbagecollect|get|getbufinfo|getbufline|getbufvar|getchar|getcharmod|getcharsearch|getcmdline|getcmdpos|getcmdtype|getcmdwintype|getcompletion|getcurpos|getcwd|getfontname|getfperm|getfsize|getftime|getftype|getline|getloclist|getmatches|getpid|getpos|getqflist|getreg|getregtype|gettabinfo|gettabvar|gettabwinvar|getwininfo|getwinposx|getwinposy|getwinvar|glob|glob2regpat|globpath|has|has_key|haslocaldir|hasmapto|histadd|histdel|histget|histnr|hlexists|hlID|hostname|iconv|indent|index|input|inputdialog|inputlist|inputrestore|inputsave|inputsecret|insert|invert|isdirectory|islocked|isnan|items|job_getchannel|job_info|job_setoptions|job_start|job_status|job_stop|join|js_decode|js_encode|json_decode|json_encode|keys|len|libcall|libcallnr|line|line2byte|lispindent|localtime|log|log10|luaeval|map|maparg|mapcheck|match|matchadd|matchaddpos|matcharg|matchdelete|matchend|matchlist|matchstr|matchstrpos|max|min|mkdir|mode|mzeval|nextnonblank|nr2char|or|pathshorten|perleval|pow|prevnonblank|printf|pumvisible|py3eval|pyeval|range|readfile|reltime|reltimefloat|reltimestr|remote_expr|remote_foreground|remote_peek|remote_read|remote_send|remove|rename|repeat|resolve|reverse|round|screenattr|screenchar|screencol|screenrow|search|searchdecl|searchpair|searchpairpos|searchpos|server2client|serverlist|setbufvar|setcharsearch|setcmdpos|setfperm|setline|setloclist|setmatches|setpos|setqflist|setreg|settabvar|settabwinvar|setwinvar|sha256|shellescape|shiftwidth|simplify|sin|sinh|sort|soundfold|spellbadword|spellsuggest|split|sqrt|str2float|str2nr|strcharpart|strchars|strdisplaywidth|strftime|strgetchar|stridx|string|strlen|strpart|strridx|strtrans|strwidth|submatch|substitute|synconcealed|synID|synIDattr|synIDtrans|synstack|system|systemlist|tabpagebuflist|tabpagenr|tabpagewinnr|tagfiles|taglist|tan|tanh|tempname|test_alloc_fail|test_autochdir|test_disable_char_avail|test_garbagecollect_now|test_null_channel|test_null_dict|test_null_job|test_null_list|test_null_partial|test_null_string|test_settime|timer_info|timer_pause|timer_start|timer_stop|timer_stopall|tolower|toupper|tr|trunc|type|undofile|undotree|uniq|values|virtcol|visualmode|wildmenumode|win_findbuf|win_getid|win_gotoid|win_id2tabwin|win_id2win|winbufnr|wincol|winheight|winline|winnr|winrestcmd|winrestview|winsaveview|winwidth|wordcount|writefile|xor)\\b"
    },
    "vimGroup": {
      "name": "support.type.group.viml",
      "match": "(?i)\\b(Boolean|Character|Comment|Conditional|Constant|Debug|Define|Delimiter|Error|Exception|Float|Function|Identifier|Ignore|Include|Keyword|Label|Macro|Number|Operator|PreCondit|PreProc|Repeat|Special|SpecialChar|SpecialComment|Statement|StorageClass|String|Structure|Tag|Todo|Type|Typedef|Underlined)\\b"
    },
    "vimGroupSpecial": {
      "name": "support.function.vimGroupSpecial.viml",
      "match": "\\b(ALL|ALLBUT|CONTAINED|TOP)\\b"
    },
    "vimHLGroup": {
      "name": "support.type.highlight-group.viml",
      "match": "(?i)\\b(ColorColumn|Cursor|CursorColumn|CursorIM|CursorLine|CursorLineNr|DiffAdd|DiffChange|DiffDelete|DiffText|Directory|EndOfBuffer|ErrorMsg|FoldColumn|Folded|IncSearch|LineNr|MatchParen|Menu|ModeMsg|MoreMsg|NonText|Normal|Pmenu|PmenuSbar|PmenuSel|PmenuThumb|Question|Scrollbar|Search|SignColumn|SpecialKey|SpellBad|SpellCap|SpellLocal|SpellRare|StatusLine|StatusLineNC|TabLine|TabLineFill|TabLineSel|Title|Tooltip|VertSplit|Visual|VisualNOS|WarningMsg|WildMenu)\\b"
    },
    "vimHiAttrib": {
      "name": "support.function.vimHiAttrib.viml",
      "match": "\\b(bold|inverse|italic|none|reverse|standout|undercurl|underline)\\b"
    },
    "vimHiClear": {
      "name": "support.function.vimHiClear.viml",
      "match": "\\b(clear)\\b"
    },
    "vimHiCtermColor": {
      "name": "support.constant.colour.color.$1.viml",
      "match": "\\b(black|blue|brown|cyan|darkblue|darkcyan|darkgray|darkgreen|darkgrey|darkmagenta|darkred|darkyellow|gray|green|grey|lightblue|lightcyan|lightgray|lightgreen|lightgrey|lightmagenta|lightred|magenta|red|white|yellow)\\b"
    },
    "vimMapModKey": {
      "name": "support.function.vimMapModKey.viml",
      "match": "\\b(buffer|expr|leader|localleader|nowait|plug|script|sid|silent|unique)\\b"
    },
    "vimOption": {
      "name": "support.variable.option.viml",
      "match": "\\b(acd|ai|akm|al|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|ar|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|belloff|beval|bex|bexpr|bg|bh|bin|binary|bk|bkc|bl|bo|bomb|breakat|breakindent|breakindentopt|bri|briopt|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|cb|cc|ccv|cd|cdpath|cedit|cf|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cm|cmdheight|cmdwinheight|cmp|cms|co|cocu|cole|colorcolumn|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|confirm|copyindent|cot|cp|cpo|cpoptions|cpt|crb|cryptmethod|cscopepathcomp|cscopeprg|cscopequickfix|cscoperelative|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|csre|cst|csto|csverb|cuc|cul|cursor|cursorbind|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|display|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|emo|emoji|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|ex|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fic|fileencoding|fileencodings|fileformat|fileformats|fileignorecase|filetype|fillchars|fixendofline|fixeol|fk|fkmap|flp|fml|fmr|fo|foldclose|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldopen|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|go|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hid|hidden|highlight|history|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatefunc|imactivatekey|imaf|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|imsf|imstatusfunc|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbk|invbl|invbomb|invbreakindent|invbri|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invcopyindent|invcp|invcrb|invcscoperelative|invcscopetag|invcscopeverbose|invcsre|invcst|invcsverb|invcuc|invcul|invcursorbind|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invea|inveb|inved|invedcompatible|invek|invemo|invemoji|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfic|invfileignorecase|invfixendofline|invfixeol|invfk|invfkmap|invfoldenable|invfs|invfsync|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invimdisable|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlangnoremap|invlangremap|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invlnr|invloadplugins|invlpl|invlrm|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invrelativenumber|invremap|invrestorescreen|invrevins|invri|invrightleft|invrl|invrnu|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invudf|invundofile|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwic|invwildignorecase|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|is|isf|isfname|isi|isident|isk|iskeyword|isp|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|langnoremap|langremap|laststatus|lazyredraw|lbr|lcs|level|linebreak|lines|linespace|lisp|lispwords|list|listchars|lm|lmap|lnr|loadplugins|lpl|lrm|ls|lsp|luadll|lw|lz|ma|macatsui|magic|makeef|makeprg|mat|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|mod|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobk|nobl|nobomb|nobreakindent|nobri|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|nocopyindent|nocp|nocrb|nocscoperelative|nocscopetag|nocscopeverbose|nocsre|nocst|nocsverb|nocuc|nocul|nocursorbind|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|noea|noeb|noed|noedcompatible|noek|noemo|noemoji|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofic|nofileignorecase|nofixendofline|nofixeol|nofk|nofkmap|nofoldenable|nofs|nofsync|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|nohlsearch|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noimdisable|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolangnoremap|nolangremap|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|nolnr|noloadplugins|nolpl|nolrm|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|norelativenumber|noremap|norestorescreen|norevins|nori|norightleft|norl|nornu|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|noudf|noundofile|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowic|nowildignorecase|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|nrformats|nu|number|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|packpath|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|perldll|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|pp|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|pythondll|pythonthreedll|qe|quoteescape|rdt|re|readonly|redrawtime|regexpengine|relativenumber|remap|renderoptions|report|restorescreen|revins|ri|rightleft|rightleftcmd|rl|rlc|rnu|ro|rop|rs|rtp|ru|rubydll|ruf|ruler|rulerformat|runtimepath|sb|sbo|sbr|sc|scb|scl|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|sh|shcf|shell|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxescape|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|signcolumn|siso|sj|slm|sm|smartcase|smartindent|smarttab|smc|smd|sn|so|softtabstop|sol|sp|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|spr|sps|sr|srr|ss|ssl|ssop|st|sta|stal|startofline|statusline|stl|stmp|sts|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxe|sxq|syn|synmaxcol|syntax|t_8b|t_8f|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RB|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_SR|t_te|t_ti|t_ts|t_u7|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xn|t_xs|t_ZH|t_ZR|ta|tabline|tabpagemax|tabstop|tag|tagbsearch|tagcase|taglength|tagrelative|tags|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tc|tcldll|tenc|term|termbidi|termencoding|termguicolors|terse|textauto|textmode|textwidth|tf|tgc|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|tl|tm|to|toolbar|toolbariconsize|top|tpm|tr|ts|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|udf|udir|ul|undodir|undofile|undolevels|undoreload|updatecount|updatetime|ur|ut|vb|vbs|vdir|ve|verbose|verbosefile|vfile|vi|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wa|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|wh|whichwrap|wi|wic|wig|wildchar|wildcharm|wildignore|wildignorecase|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|write|writeany|writebackup|writedelay|ws|ww)\\b"
    },
    "vimPattern": {
      "name": "support.function.vimPattern.viml",
      "match": "\\b(end|skip|start)\\b"
    },
    "vimStdPlugin": {
      "name": "support.class.stdplugin.viml",
      "match": "\\b(DiffOrig|Man|N|Next|P|Print|S|TOhtml|XMLent|XMLns)\\b"
    },
    "vimSynCase": {
      "name": "support.function.vimSynCase.viml",
      "match": "\\b(ignore|match)\\b"
    },
    "vimSynType": {
      "name": "support.function.vimSynType.viml",
      "match": "\\b(case|clear|cluster|enable|include|iskeyword|keyword|list|manual|match|off|on|region|reset|sync)\\b"
    },
    "vimSyncC": {
      "name": "support.function.vimSyncC.viml",
      "match": "\\b(ccomment|clear|fromstart)\\b"
    },
    "vimSyncLinecont": {
      "name": "support.function.vimSyncLinecont.viml",
      "match": "\\b(linecont)\\b"
    },
    "vimSyncMatch": {
      "name": "support.function.vimSyncMatch.viml",
      "match": "\\b(match)\\b"
    },
    "vimSyncNone": {
      "name": "support.function.vimSyncNone.viml",
      "match": "\\b(NONE)\\b"
    },
    "vimSyncRegion": {
      "name": "support.function.vimSyncRegion.viml",
      "match": "\\b(region)\\b"
    },
    "vimUserAttrbCmplt": {
      "name": "support.function.vimUserAttrbCmplt.viml",
      "match": "\\b(augroup|behave|buffer|color|command|compiler|cscope|custom|customlist|dir|environment|event|expression|file|file_in_path|filetype|function|help|highlight|history|locale|mapping|menu|option|packadd|shellcmd|sign|syntax|syntime|tag|tag_listfiles|user|var)\\b"
    },
    "vimUserAttrbKey": {
      "name": "support.function.vimUserAttrbKey.viml",
      "match": "\\b(bang?|bar|com|complete|cou|count|n|nargs|ra|range|re|register)\\b"
    },
    "vimUserCommand": {
      "name": "support.function.vimUserCommand.viml",
      "match": "\\b(com|command)\\b"
    }
  }
}