{
  "name": "Ren'Py",
  "scopeName": "source.renpy",
  "patterns": [
    {
      "begin": "(^[ \\t]+)?(?=#)",
      "end": "(?!\\G)",
      "patterns": [
        {
          "name": "comment.line.number-sign.python",
          "begin": "#",
          "end": "\\n",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.python"
            }
          }
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.python"
        }
      }
    },
    {
      "name": "constant.numeric.integer.long.hexadecimal.python",
      "match": "\\b(?i:(0x[[:xdigit:]]*)L)"
    },
    {
      "name": "constant.numeric.integer.hexadecimal.python",
      "match": "\\b(?i:(0x[[:xdigit:]]*))"
    },
    {
      "name": "constant.numeric.integer.long.octal.python",
      "match": "\\b(?i:(0[0-7]+)L)"
    },
    {
      "name": "constant.numeric.integer.octal.python",
      "match": "\\b(0[0-7]+)"
    },
    {
      "name": "constant.numeric.complex.python",
      "match": "\\b(?i:(((\\d+(\\.(?=[^a-zA-Z_])\\d*)?|(?\u003c=[^0-9a-zA-Z_])\\.\\d+)(e[\\-\\+]?\\d+)?))J)"
    },
    {
      "name": "constant.numeric.float.python",
      "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])"
    },
    {
      "name": "constant.numeric.float.python",
      "match": "(?\u003c=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))"
    },
    {
      "name": "constant.numeric.float.python",
      "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))"
    },
    {
      "name": "constant.numeric.integer.long.decimal.python",
      "match": "\\b(?i:([1-9]+[0-9]*|0)L)"
    },
    {
      "name": "constant.numeric.integer.decimal.python",
      "match": "\\b([1-9]+[0-9]*|0)"
    },
    {
      "match": "\\b(global)\\b",
      "captures": {
        "1": {
          "name": "storage.modifier.global.python"
        }
      }
    },
    {
      "match": "\\b(nonlocal)\\b",
      "captures": {
        "1": {
          "name": "storage.modifier.nonlocal.python"
        }
      }
    },
    {
      "match": "\\b(?:(import)|(from))\\b",
      "captures": {
        "1": {
          "name": "keyword.control.import.python"
        },
        "2": {
          "name": "keyword.control.import.from.python"
        }
      }
    },
    {
      "name": "keyword.control.conditional.python",
      "match": "\\b(if|elif|else)\\b"
    },
    {
      "name": "keyword.control.exception.python",
      "match": "\\b(except|finally|try|raise)\\b"
    },
    {
      "name": "keyword.control.repeat.python",
      "match": "\\b(for|while)\\b"
    },
    {
      "name": "keyword.control.statement.python",
      "match": "\\b(function|nvl|block|choice|parallel|contains|on|voice|imagemap|hotspot|text|frame|textbutton|grid|add|key|use|bar|with|is|button|window|hbox|vbox|mousearea|imagebutton)\\b"
    },
    {
      "name": "support.type.screen.renpy",
      "match": "\\b(kind|color|action|area|hovered|unhovered|clicked|modal|text_style|has|who|what|tag|value|theme)\\b"
    },
    {
      "name": "support.type.transform.renpy",
      "match": "\\b(repeat|fadein|fadeout|position|Position|easein|easeout|time|ui)\\b"
    },
    {
      "name": "support.type.other.renpy",
      "match": "\\b(MultiPersistent|Character|DynamicCharacter|music|sound|movie|pause|Transform|clear)\\b"
    },
    {
      "name": "invalid.deprecated.operator.renpy",
      "match": "\\$"
    },
    {
      "name": "keyword.control.statement.python",
      "match": "\\b(return|pass|break|continue|yield)\\b"
    },
    {
      "name": "support.type.objects.renpy",
      "match": "\\b(renpy|store|persistent|config|build)\\b"
    },
    {
      "name": "support.type.python.renpy",
      "match": "\\b(python)\\b"
    },
    {
      "name": "keyword.control.statement.init.renpy",
      "match": "\\b(init)\\b"
    },
    {
      "name": "support.type.transition.renpy",
      "match": "\\b(Solid|AlphaDissolve|ComposeTransition|CropMove|Dissolve|Fade|ImageDissolve|MoveTransition|MultipleTransition|Pause|Pixellate|move_transitions)\\b"
    },
    {
      "match": "\\s+(with)\\s+\\b(fade|dissolve|pixellate|move|moveinright|moveinleft|moveintop|moveinbottom|moveoutright|moveoutleft|moveouttop|moveoutbottom|ease|easeinright|easeinleft|easeintop|easeinbottom|easeoutright|easeoutleft|easeouttop|easeoutbottom|zoomin|zoomout|zoominout|vpunch|hpunch|blinds|squares|wipeleft|wiperight|wipeup|wipedown|slideleft|slideright|slideup|slidedown|slideawayleft|slideawayright|slideawayup|slideawaydown|irisin|irisout)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.statement.with.renpy"
        },
        "2": {
          "name": "support.type.transition.renpy"
        }
      }
    },
    {
      "name": "support.type.transform.renpy",
      "match": "\\b(linear|top_margin|ymargin|xsize|ysize|yminimum|xminimum|ymaximum|xmaximum|transpose|insensitive|selected_idle|selected_hover|ground|idle|hover|focus_mask|hover_sound|activate_sound|style|spacing|text_align|size_group|layout|style_group|background|ypadding|xpadding|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|xfill|xmargin|pos|xpos|ypos|anchor|xanchor|yanchor|align|xalign|yalign|xoffset|yoffset|xcenter|ycenter|rotate|rotate_pad|transform_anchor|zoom|xzoom|yzoom|nearest|alpha|additive|around|alignaround|angle|radius|crop|crop_relative|corner1|corner2|size|subpixel|delay|events)\\b"
    },
    {
      "name": "support.type.movie.renpy",
      "match": "\\b(Movie|movie_cutscene)\\b"
    },
    {
      "name": "keyword.control.statement.python",
      "match": "\\b(play|queue|stop)\\b"
    },
    {
      "match": "(\\s*\\.\\s*)(music|sound)\\s*\\.\\s*(play|seen_audio|get_duration|get_pause|get_playing|get_pos|is_playing|queue|register_channel|set_pan|set_pause|set_queue_empty_callback|set_volume|stop|loop|noloop)\\b",
      "captures": {
        "2": {
          "name": "support.type.music.renpy"
        },
        "3": {
          "name": "entity.name.function.images.renpy"
        }
      }
    },
    {
      "match": "(\\s*\\.\\s*)(play|seen_audio)\\b",
      "captures": {
        "2": {
          "name": "entity.name.function.images.renpy"
        }
      }
    },
    {
      "name": "support.type.show.renpy",
      "match": "\\b(as|at|behind|onlayer|zorder|expression)\\b"
    },
    {
      "match": "(\\s*\\.\\s*)(can_show|copy_images|get_available_image_attributes|get_available_image_tags|get_image_bounds|get_placement|get_showing_tags|has_image|image_exists|seen_image|showing|start_predict|stop_predict)\\b",
      "captures": {
        "2": {
          "name": "entity.name.function.images.renpy"
        }
      }
    },
    {
      "name": "support.type.action.renpy",
      "match": "\\b(Hide|Jump|NullAction|Return|Show|ShowTransient)\\b"
    },
    {
      "name": "support.type.action.renpy",
      "match": "\\b(SetDict|SetField|SetScreenVariable|SetVariable|ToggleDict|ToggleField|ToggleScreenVariable|ToggleVariable)\\b"
    },
    {
      "name": "support.type.action.renpy",
      "match": "\\b(MainMenu|Quit|ShowMenu|Start)\\b"
    },
    {
      "name": "support.type.action.renpy",
      "match": "\\b(FileAction|FileDelete|FileLoad|FilePage|FilePageNext|FilePagePrevious|FileSave|FileTakeScreenShot|QuickLoad|QuickSave)\\b"
    },
    {
      "name": "support.type.action.renpy",
      "match": "\\b(Play|Queue|SetMixer|Stop)\\b"
    },
    {
      "name": "support.type.other.renpy",
      "match": "\\b(Preference|Function|Help|HideInterface|If|InvertSelected|MouseMove|Notify|OpenURL|RollForward|Rollback|ScreenShot|SelectedIf|Skip|With)\\b"
    },
    {
      "name": "entity.name.function.translation.renpy",
      "match": "(?:\\s+)\\b(new)\\b"
    },
    {
      "name": "keyword.operator.logical.translation.renpy",
      "match": "(?:\\s+)\\b(old)\\b"
    },
    {
      "match": "^\\b(translate)\\b\\s\\b([a-zA-z0-9_]+)\\b\\s\\b(strings)\\b",
      "captures": {
        "1": {
          "name": "keyword.operator.logical.translation.renpy"
        },
        "2": {
          "name": "entity.name.function.translation.renpy"
        },
        "3": {
          "name": "support.type.translation.renpy"
        }
      }
    },
    {
      "name": "keyword.operator.logical.python",
      "match": "\\b(and|in|is|not|or)\\b"
    },
    {
      "match": "\\b(assert|del|exec|print)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.python"
        }
      }
    },
    {
      "name": "invalid.deprecated.operator.python",
      "match": "\u003c\u003e"
    },
    {
      "name": "keyword.operator.comparison.python",
      "match": "\u003c\\=|\u003e\\=|\\=\\=|\u003c|\u003e|\\!\\="
    },
    {
      "name": "keyword.operator.assignment.augmented.python",
      "match": "\\+\\=|-\\=|\\*\\=|/\\=|//\\=|%\\=|\u0026\\=|\\|\\=|\\^\\=|\u003e\u003e\\=|\u003c\u003c\\=|\\*\\*\\="
    },
    {
      "name": "keyword.operator.arithmetic.python",
      "match": "\\+|\\-|\\*|\\*\\*|/|//|%|\u003c\u003c|\u003e\u003e|\u0026|\\||\\^|~"
    },
    {
      "name": "keyword.operator.assignment.python",
      "match": "\\="
    },
    {
      "name": "meta.class.old-style.python",
      "contentName": "entity.name.type.class.python",
      "begin": "^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*\\:)",
      "end": "\\s*(:)",
      "patterns": [
        {
          "include": "#entity_name_class"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.type.class.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.class.begin.python"
        }
      }
    },
    {
      "name": "meta.class.python",
      "begin": "^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*\\()",
      "end": "(\\))\\s*(?:(\\:)|(.*$\\n?))",
      "patterns": [
        {
          "contentName": "entity.name.type.class.python",
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#entity_name_class"
            }
          ]
        },
        {
          "contentName": "meta.class.inheritance.python",
          "begin": "(\\()",
          "end": "(?=\\)|:)",
          "patterns": [
            {
              "contentName": "entity.other.inherited-class.python",
              "begin": "(?\u003c=\\(|,)\\s*",
              "end": "\\s*(?:(,)|(?=\\)))",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "endCaptures": {
                "1": {
                  "name": "punctuation.separator.inheritance.python"
                }
              }
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.inheritance.begin.python"
            }
          }
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.type.class.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.inheritance.end.python"
        },
        "2": {
          "name": "punctuation.section.class.begin.python"
        },
        "3": {
          "name": "invalid.illegal.missing-section-begin.python"
        }
      }
    },
    {
      "name": "meta.class.python",
      "begin": "^\\s*((jump)|(call)|(screen)|(label)|(menu)|(transform))\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*)",
      "end": "(\\n|\\()|\\:",
      "patterns": [
        {
          "contentName": "entity.name.type.class.python",
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#entity_name_class"
            }
          ]
        },
        {
          "contentName": "meta.class.inheritance.python",
          "begin": "(\\()",
          "end": "(?=\\)|:)",
          "patterns": [
            {
              "contentName": "entity.other.inherited-class.python",
              "begin": "(?\u003c=\\(|,)\\s*",
              "end": "\\s*(?:(,)|(?=\\)))",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "endCaptures": {
                "1": {
                  "name": "punctuation.separator.inheritance.python"
                }
              }
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.inheritance.begin.python"
            }
          }
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control.statement.renpy"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.inheritance.end.python"
        },
        "2": {
          "name": "punctuation.section.class.begin.python"
        },
        "3": {
          "name": "invalid.illegal.missing-section-begin.python"
        }
      }
    },
    {
      "name": "meta.class.python",
      "begin": "((default)|(define)|(image)|(scene)|(show)|(hide))\\s+((\\s)|(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*))",
      "end": "(\\=)|(\\s)|(\\s*$\\n?|#.*$\\n?)",
      "patterns": [
        {
          "contentName": "entity.name.type.class.python",
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#entity_name_class"
            }
          ]
        },
        {
          "contentName": "meta.class.inheritance.python",
          "begin": "(\\()",
          "end": "(?=\\)|:|)",
          "patterns": [
            {
              "contentName": "entity.other.inherited-class.python",
              "begin": "(?\u003c=\\(|,)\\s*",
              "end": "\\s*(?:(,)|(?=\\)))",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "endCaptures": {
                "1": {
                  "name": "punctuation.separator.inheritance.python"
                }
              }
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.inheritance.begin.python"
            }
          }
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control.statement.renpy"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.inheritance.end.python"
        },
        "2": {
          "name": "punctuation.section.class.begin.python"
        },
        "3": {
          "name": "invalid.illegal.missing-section-begin.python"
        }
      }
    },
    {
      "name": "meta.class.python",
      "begin": "^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9])",
      "end": "(\\()|(\\s*$\\n?|#.*$\\n?)",
      "patterns": [
        {
          "contentName": "entity.name.type.class.python",
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#entity_name_function"
            }
          ]
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.type.class.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.inheritance.begin.python"
        },
        "2": {
          "name": "invalid.illegal.missing-inheritance.python"
        }
      }
    },
    {
      "name": "meta.function.python",
      "begin": "^\\s*(def)\\s+(?=[A-Za-z_][A-Za-z0-9_]*\\s*\\()",
      "end": "(\\))\\s*(?:(\\:)|(.*$\\n?))",
      "patterns": [
        {
          "contentName": "entity.name.function.python",
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#entity_name_function"
            }
          ]
        },
        {
          "contentName": "meta.function.parameters.python",
          "begin": "(\\()",
          "end": "(?=\\)\\s*\\:)",
          "patterns": [
            {
              "include": "#keyword_arguments"
            },
            {
              "match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(,)|(?=[\\n\\)]))",
              "captures": {
                "1": {
                  "name": "variable.parameter.function.python"
                },
                "2": {
                  "name": "punctuation.separator.parameters.python"
                }
              }
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.begin.python"
            }
          }
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.end.python"
        },
        "2": {
          "name": "punctuation.section.function.begin.python"
        },
        "3": {
          "name": "invalid.illegal.missing-section-begin.python"
        }
      }
    },
    {
      "name": "meta.function.python",
      "begin": "^\\s*(def)\\s+(?=[A-Za-z_][A-Za-z0-9_]*)",
      "end": "(\\()|\\s*($\\n?|#.*$\\n?)",
      "patterns": [
        {
          "contentName": "entity.name.function.python",
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#entity_name_function"
            }
          ]
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.begin.python"
        },
        "2": {
          "name": "invalid.illegal.missing-parameters.python"
        }
      }
    },
    {
      "name": "meta.function.inline.python",
      "begin": "(lambda)(?=\\s+)",
      "end": "(\\:)",
      "patterns": [
        {
          "contentName": "meta.function.inline.parameters.python",
          "begin": "\\s+",
          "end": "(?=\\:)",
          "patterns": [
            {
              "include": "#keyword_arguments"
            },
            {
              "match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(,)|(?=[\\n\\)\\:]))",
              "captures": {
                "1": {
                  "name": "variable.parameter.function.python"
                },
                "2": {
                  "name": "punctuation.separator.parameters.python"
                }
              }
            }
          ]
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.inline.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.end.python"
        },
        "2": {
          "name": "punctuation.section.function.begin.python"
        },
        "3": {
          "name": "invalid.illegal.missing-section-begin.python"
        }
      }
    },
    {
      "name": "meta.function.decorator.python",
      "begin": "^\\s*(?=@\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\()",
      "end": "(\\))",
      "patterns": [
        {
          "contentName": "entity.name.function.decorator.python",
          "begin": "(?=(@)\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\()",
          "end": "(?=\\s*\\()",
          "patterns": [
            {
              "include": "#dotted_name"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.decorator.python"
            }
          }
        },
        {
          "contentName": "meta.function.decorator.arguments.python",
          "begin": "(\\()",
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#keyword_arguments"
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.arguments.begin.python"
            }
          }
        }
      ],
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.end.python"
        }
      }
    },
    {
      "name": "meta.function.decorator.python",
      "contentName": "entity.name.function.decorator.python",
      "begin": "^\\s*(?=@\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)",
      "end": "(?=\\s|$\\n?|#)",
      "patterns": [
        {
          "begin": "(?=(@)\\s*[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*)",
          "end": "(?=\\s|$\\n?|#)",
          "patterns": [
            {
              "include": "#dotted_name"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.decorator.python"
            }
          }
        }
      ]
    },
    {
      "name": "meta.function-call.python",
      "contentName": "meta.function-call.arguments.python",
      "begin": "(?\u003c=\\)|\\])\\s*(\\()",
      "end": "(\\))",
      "patterns": [
        {
          "include": "#keyword_arguments"
        },
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.begin.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.end.python"
        }
      }
    },
    {
      "name": "meta.function-call.python",
      "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\()",
      "end": "(\\))",
      "patterns": [
        {
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\()",
          "end": "(?=\\s*\\()",
          "patterns": [
            {
              "include": "#dotted_name"
            }
          ]
        },
        {
          "contentName": "meta.function-call.arguments.python",
          "begin": "(\\()",
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#keyword_arguments"
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.arguments.begin.python"
            }
          }
        }
      ],
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.end.python"
        }
      }
    },
    {
      "name": "meta.item-access.python",
      "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\[)",
      "end": "(\\])",
      "patterns": [
        {
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\[)",
          "end": "(?=\\s*\\[)",
          "patterns": [
            {
              "include": "#dotted_name"
            }
          ]
        },
        {
          "contentName": "meta.item-access.arguments.python",
          "begin": "(\\[)",
          "end": "(?=\\])",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.arguments.begin.python"
            }
          }
        }
      ],
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.end.python"
        }
      }
    },
    {
      "name": "meta.item-access.python",
      "contentName": "meta.item-access.arguments.python",
      "begin": "(?\u003c=\\)|\\])\\s*(\\[)",
      "end": "(\\])",
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.begin.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.end.python"
        }
      }
    },
    {
      "match": "\\b(menu)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.statement.renpy"
        }
      }
    },
    {
      "match": "\\b(def|lambda)\\b",
      "captures": {
        "1": {
          "name": "storage.type.function.python"
        }
      }
    },
    {
      "match": "\\b(class)\\b",
      "captures": {
        "1": {
          "name": "storage.type.class.python"
        }
      }
    },
    {
      "include": "#line_continuation"
    },
    {
      "include": "#language_variables"
    },
    {
      "name": "constant.language.python",
      "match": "\\b(None|True|False|Ellipsis|NotImplemented)\\b"
    },
    {
      "name": "constant.language.python",
      "match": "\\b(no_action|yes_action|no_action)\\b"
    },
    {
      "include": "#string_quoted_single"
    },
    {
      "include": "#string_quoted_double"
    },
    {
      "include": "#dotted_name"
    },
    {
      "begin": "(\\()",
      "end": "(\\))",
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    {
      "match": "(\\[)(\\s*(\\]))\\b",
      "captures": {
        "1": {
          "name": "punctuation.definition.list.begin.python"
        },
        "2": {
          "name": "meta.empty-list.python"
        },
        "3": {
          "name": "punctuation.definition.list.end.python"
        }
      }
    },
    {
      "name": "meta.structure.list.python",
      "begin": "(\\[)",
      "end": "(\\])",
      "patterns": [
        {
          "contentName": "meta.structure.list.item.python",
          "begin": "(?\u003c=\\[|\\,)\\s*(?![\\],])",
          "end": "\\s*(?:(,)|(?=\\]))",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.list.python"
            }
          }
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.list.begin.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.list.end.python"
        }
      }
    },
    {
      "name": "meta.structure.tuple.python",
      "match": "(\\()(\\s*(\\)))",
      "captures": {
        "1": {
          "name": "punctuation.definition.tuple.begin.python"
        },
        "2": {
          "name": "meta.empty-tuple.python"
        },
        "3": {
          "name": "punctuation.definition.tuple.end.python"
        }
      }
    },
    {
      "name": "meta.structure.dictionary.python",
      "match": "(\\{)(\\s*(\\}))",
      "captures": {
        "1": {
          "name": "punctuation.definition.dictionary.begin.python"
        },
        "2": {
          "name": "meta.empty-dictionary.python"
        },
        "3": {
          "name": "punctuation.definition.dictionary.end.python"
        }
      }
    },
    {
      "name": "meta.structure.dictionary.python",
      "begin": "(\\{)",
      "end": "(\\})",
      "patterns": [
        {
          "contentName": "meta.structure.dictionary.key.python",
          "begin": "(?\u003c=\\{|\\,|^)\\s*(?![\\},])",
          "end": "\\s*(?:(?=\\})|(\\:))",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.valuepair.dictionary.python"
            }
          }
        },
        {
          "contentName": "meta.structure.dictionary.value.python",
          "begin": "(?\u003c=\\:|^)\\s*",
          "end": "\\s*(?:(?=\\})|(,))",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.dictionary.python"
            }
          }
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.dictionary.begin.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.dictionary.end.python"
        }
      }
    }
  ],
  "repository": {
    "builtin_exceptions": {
      "name": "support.type.exception.python",
      "match": "(?x)\\b(\n\t\t\t\t(\n\t\t\t\t\tArithmetic|Assertion|Attribute|BlockingIO|BrokenPipe|Buffer|ChildProcess|\n\t\t\t\t\tConnection(Aborted|Refused|Reset)?|EOF|Environment|FileExists|\n\t\t\t\t\tFileNotFound|FloatingPoint|Interrupted|IO|IsADirectoryError|\n\t\t\t\t\tImport|Indentation|Index|Key|Lookup|Memory|Name|NotADirectory|\n\t\t\t\t\tNotImplemented|OS|Overflow|Permission|ProcessLookup|Reference|\n\t\t\t\t\tRuntime|Standard|Syntax|System|Tab|Timeout|Type|UnboundLocal|\n\t\t\t\t\tUnicode(Encode|Decode|Translate)?|Value|VMS|Windows|ZeroDivision\n\t\t\t\t)Error|\n\t\t\t\t((Pending)?Deprecation|Runtime|Syntax|User|Future|Import|Unicode|Bytes)?Warning|\n\t\t\t\t(Base)?Exception|\n\t\t\t\tSystemExit|StopIteration|NotImplemented|KeyboardInterrupt|GeneratorExit\n\t\t\t)\\b"
    },
    "builtin_functions": {
      "name": "support.function.builtin.python",
      "match": "(?x)\\b(\n\t\t\t\t__import__|all|abs|any|apply|ascii|bin|callable|chr|classmethod|cmp|coerce|\n\t\t\t\tcompile|delattr|dir|divmod|enumerate|eval|execfile|filter|format|getattr|\n\t\t\t\tglobals|hasattr|hash|help|hex|id|input|intern|isinstance|issubclass|iter|\n\t\t\t\tlen|locals|map|max|min|next|oct|open|ord|pow|print|property|range|\n\t\t\t\traw_input|reduce|reload|repr|reversed|round|setattr|sorted|staticmethod|\n\t\t\t\tsum|super|type|unichr|vars|zip\n\t\t\t)\\b"
    },
    "builtin_types": {
      "name": "support.type.python",
      "match": "(?x)\\b(\n\t\t\t\tbasestring|bool|buffer|bytearray|bytes|complex|dict|float|frozenset|int|\n\t\t\t\tlist|long|memoryview|object|range|set|slice|str|tuple|unicode|xrange\n\t\t\t)\\b"
    },
    "constant_placeholder": {
      "name": "constant.other.placeholder.tags.renpy",
      "match": "(?i:(%(\\([a-z_]+\\))?#?0?\\-?[ ]?\\+?([0-9]*|\\*)(\\.([0-9]*|\\*))?([hL][a-z]|[a-z%]))|(\\{([\\?\\\u0026\\%\\\\\\/#=\\-\\+!\\[\\].:\\w ]+)?\\})|(\\{\\/([!\\[\\].:\\w ]+)?\\})|(\\[([!\\[\\].:\\w ]+)?\\]))"
    },
    "docstrings": {
      "patterns": [
        {
          "name": "comment.block.python",
          "begin": "^\\s*(?=[uU]?[rR]?\"\"\")",
          "end": "(?\u003c=\"\"\")",
          "patterns": [
            {
              "include": "#string_quoted_double"
            }
          ]
        },
        {
          "name": "comment.block.python",
          "begin": "^\\s*(?=[uU]?[rR]?''')",
          "end": "(?\u003c=''')",
          "patterns": [
            {
              "include": "#string_quoted_single"
            }
          ]
        }
      ]
    },
    "dotted_name": {
      "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*)",
      "end": "(?![A-Za-z0-9_\\.])",
      "patterns": [
        {
          "begin": "(\\.)(?=[A-Za-z_][A-Za-z0-9_]*)",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#magic_function_names"
            },
            {
              "include": "#magic_variable_names"
            },
            {
              "include": "#illegal_names"
            },
            {
              "include": "#generic_names"
            }
          ]
        },
        {
          "begin": "(?\u003c!\\.)(?=[A-Za-z_][A-Za-z0-9_]*)",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#builtin_functions"
            },
            {
              "include": "#builtin_types"
            },
            {
              "include": "#builtin_exceptions"
            },
            {
              "include": "#illegal_names"
            },
            {
              "include": "#magic_function_names"
            },
            {
              "include": "#magic_variable_names"
            },
            {
              "include": "#language_variables"
            },
            {
              "include": "#generic_names"
            }
          ]
        }
      ]
    },
    "entity_name_class": {
      "patterns": [
        {
          "include": "#illegal_names"
        },
        {
          "include": "#generic_names"
        }
      ]
    },
    "entity_name_function": {
      "patterns": [
        {
          "include": "#magic_function_names"
        },
        {
          "include": "#illegal_names"
        },
        {
          "include": "#generic_names"
        }
      ]
    },
    "escaped_char": {
      "match": "(\\\\x[0-9A-F]{2})|(\\\\[0-7]{3})|(\\\\\\n)|(\\\\\\\\)|(\\\\\\\")|(\\\\')|(\\\\a)|(\\\\b)|(\\\\f)|(\\\\n)|(\\\\r)|(\\\\t)|(\\\\v)",
      "captures": {
        "1": {
          "name": "constant.character.escape.hex.python"
        },
        "10": {
          "name": "constant.character.escape.linefeed.python"
        },
        "11": {
          "name": "constant.character.escape.return.python"
        },
        "12": {
          "name": "constant.character.escape.tab.python"
        },
        "13": {
          "name": "constant.character.escape.vertical-tab.python"
        },
        "2": {
          "name": "constant.character.escape.octal.python"
        },
        "3": {
          "name": "constant.character.escape.newline.python"
        },
        "4": {
          "name": "constant.character.escape.backlash.python"
        },
        "5": {
          "name": "constant.character.escape.double-quote.python"
        },
        "6": {
          "name": "constant.character.escape.single-quote.python"
        },
        "7": {
          "name": "constant.character.escape.bell.python"
        },
        "8": {
          "name": "constant.character.escape.backspace.python"
        },
        "9": {
          "name": "constant.character.escape.formfeed.python"
        }
      }
    },
    "escaped_unicode_char": {
      "match": "(\\\\U[0-9A-Fa-f]{8})|(\\\\u[0-9A-Fa-f]{4})|(\\\\N\\{[a-zA-Z ]+\\})",
      "captures": {
        "1": {
          "name": "constant.character.escape.unicode.16-bit-hex.python"
        },
        "2": {
          "name": "constant.character.escape.unicode.32-bit-hex.python"
        },
        "3": {
          "name": "constant.character.escape.unicode.name.python"
        }
      }
    },
    "function_name": {
      "patterns": [
        {
          "include": "#magic_function_names"
        },
        {
          "include": "#magic_variable_names"
        },
        {
          "include": "#builtin_exceptions"
        },
        {
          "include": "#builtin_functions"
        },
        {
          "include": "#builtin_types"
        },
        {
          "include": "#generic_names"
        }
      ]
    },
    "generic_names": {
      "match": "[A-Za-z_][A-Za-z0-9_]*"
    },
    "illegal_names": {
      "name": "invalid.illegal.name.python",
      "match": "\\b(and|as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|global|if|import|in|is|lambda|nonlocal|not|or|print|raise|try|while|with|yield)\\b"
    },
    "keyword_arguments": {
      "begin": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(=)(?!=)",
      "end": "\\s*(?:(,)|(?=$\\n?|[\\)\\:]))",
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "variable.parameter.function.python"
        },
        "2": {
          "name": "keyword.operator.assignment.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.parameters.python"
        }
      }
    },
    "language_variables": {
      "name": "variable.language.python",
      "match": "\\b(self|cls)\\b"
    },
    "line_continuation": {
      "match": "(\\\\)(.*)$\\n?",
      "captures": {
        "1": {
          "name": "punctuation.separator.continuation.line.python"
        },
        "2": {
          "name": "invalid.illegal.unexpected-text.python"
        }
      }
    },
    "magic_function_names": {
      "name": "support.function.magic.python",
      "match": "(?x)\\b(__(?:\n\t\t\t\t\t\tabs|add|and|cmp|coerce|complex|contains|del|delattr|\n\t\t\t\t\t\tdelete|delitem|delslice|div|divmod|enter|eq|exit|float|\n\t\t\t\t\t\tfloordiv|ge|get|getattr|getattribute|getitem|getslice|gt|\n\t\t\t\t\t\thash|hex|iadd|iand|idiv|ifloordiv|ilshift|imod|imul|init|\n\t\t\t\t\t\tint|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|\n\t\t\t\t\t\tlong|lshift|lt|mod|mul|ne|neg|new|nonzero|oct|or|pos|pow|\n\t\t\t\t\t\tradd|rand|rdiv|rdivmod|repr|rfloordiv|rlshift|rmod|rmul|ror|\n\t\t\t\t\t\trpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|\n\t\t\t\t\t\tsetslice|str|sub|truediv|unicode|xor\n\t\t\t\t\t)__)\\b"
    },
    "magic_variable_names": {
      "name": "support.variable.magic.python",
      "match": "\\b__(all|bases|class|debug|dict|doc|file|members|metaclass|methods|name|slots|weakref)__\\b"
    },
    "regular_expressions": {
      "patterns": [
        {
          "include": "source.regexp.python"
        }
      ]
    },
    "string_quoted_double": {
      "patterns": [
        {
          "name": "string.quoted.double.block.unicode-raw-regex.python",
          "begin": "([uU]r)(\"\"\")",
          "end": "((?\u003c=\"\"\")(\")\"\"|\"\"\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            },
            {
              "include": "#regular_expressions"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            }
          }
        },
        {
          "name": "string.quoted.double.block.unicode-raw.python",
          "begin": "([uU]R)(\"\"\")",
          "end": "((?\u003c=\"\"\")(\")\"\"|\"\"\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            }
          }
        },
        {
          "name": "string.quoted.double.block.raw-regex.python",
          "begin": "(r)(\"\"\")",
          "end": "((?\u003c=\"\"\")(\")\"\"|\"\"\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            },
            {
              "include": "#regular_expressions"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            }
          }
        },
        {
          "name": "string.quoted.double.block.raw.python",
          "begin": "(R)(\"\"\")",
          "end": "((?\u003c=\"\"\")(\")\"\"|\"\"\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            }
          }
        },
        {
          "name": "string.quoted.double.block.unicode.python",
          "begin": "([uU])(\"\"\")",
          "end": "((?\u003c=\"\"\")(\")\"\"|\"\"\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            }
          }
        },
        {
          "name": "string.quoted.double.single-line.unicode-raw-regex.python",
          "match": "([uU]r)(\")((?:[^\"\\\\]|\\\\.)*)(\")",
          "captures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            },
            "3": {
              "patterns": [
                {
                  "include": "#constant_placeholder"
                },
                {
                  "include": "#escaped_unicode_char"
                },
                {
                  "include": "#escaped_char"
                },
                {
                  "include": "#regular_expressions"
                }
              ]
            },
            "4": {
              "name": "punctuation.definition.string.end.python"
            }
          }
        },
        {
          "name": "string.quoted.double.single-line.unicode-raw.python",
          "begin": "([uU]R)(\")",
          "end": "((?\u003c=\")(\")|\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            },
            "3": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        },
        {
          "name": "string.quoted.double.single-line.raw-regex.python",
          "match": "(r)(\")((?:[^\"\\\\]|\\\\.)*)(\")",
          "captures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            },
            "3": {
              "patterns": [
                {
                  "include": "#constant_placeholder"
                },
                {
                  "include": "#escaped_char"
                },
                {
                  "include": "#regular_expressions"
                }
              ]
            },
            "4": {
              "name": "punctuation.definition.string.end.python"
            }
          }
        },
        {
          "name": "string.quoted.double.single-line.raw.python",
          "begin": "(R)(\")",
          "end": "((?\u003c=\")(\")|\")|(\\n)",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            },
            "3": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        },
        {
          "name": "string.quoted.double.single-line.unicode.python",
          "begin": "([uU])(\")",
          "end": "((?\u003c=\")(\")|\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            },
            "3": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        },
        {
          "name": "string.quoted.double.block.sql.python",
          "begin": "(\"\"\")(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))",
          "end": "((?\u003c=\"\"\")(\")\"\"|\"\"\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            },
            {
              "include": "source.sql"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            }
          }
        },
        {
          "name": "string.quoted.double.single-line.sql.python",
          "begin": "(\")(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))",
          "end": "((?\u003c=\")(\")|\")|(\\n)",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            },
            {
              "include": "source.sql"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            },
            "3": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        },
        {
          "name": "string.quoted.double.block.python",
          "begin": "(\"\"\")",
          "end": "((?\u003c=\"\"\")(\")\"\"|\"\"\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            }
          }
        },
        {
          "name": "string.quoted.double.single-line.python",
          "begin": "(\")",
          "end": "((?\u003c=\")(\")|\")",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.double.python"
            },
            "3": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        }
      ]
    },
    "string_quoted_single": {
      "patterns": [
        {
          "name": "string.quoted.single.single-line.python",
          "match": "(?\u003c!')(')(('))(?!')",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            },
            "2": {
              "name": "punctuation.definition.string.end.python"
            },
            "3": {
              "name": "meta.empty-string.single.python"
            }
          }
        },
        {
          "name": "string.quoted.single.block.unicode-raw-regex.python",
          "begin": "([uU]r)(''')",
          "end": "((?\u003c=''')(')''|''')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            },
            {
              "include": "#regular_expressions"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.single.python"
            }
          }
        },
        {
          "name": "string.quoted.single.block.unicode-raw.python",
          "begin": "([uU]R)(''')",
          "end": "((?\u003c=''')(')''|''')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.single.python"
            }
          }
        },
        {
          "name": "string.quoted.single.block.raw-regex.python",
          "begin": "(r)(''')",
          "end": "((?\u003c=''')(')''|''')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            },
            {
              "include": "#regular_expressions"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.single.python"
            }
          }
        },
        {
          "name": "string.quoted.single.block.raw.python",
          "begin": "(R)(''')",
          "end": "((?\u003c=''')(')''|''')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.single.python"
            }
          }
        },
        {
          "name": "string.quoted.single.block.unicode.python",
          "begin": "([uU])(''')",
          "end": "((?\u003c=''')(')''|''')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.single.python"
            }
          }
        },
        {
          "name": "string.quoted.single.single-line.unicode-raw-regex.python",
          "match": "([uU]r)(')((?:[^'\\\\]|\\\\.)*)(')",
          "captures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            },
            "3": {
              "patterns": [
                {
                  "include": "#constant_placeholder"
                },
                {
                  "include": "#escaped_unicode_char"
                },
                {
                  "include": "#escaped_char"
                },
                {
                  "include": "#regular_expressions"
                }
              ]
            },
            "4": {
              "name": "punctuation.definition.string.end.python"
            }
          }
        },
        {
          "name": "string.quoted.single.single-line.unicode-raw.python",
          "begin": "([uU]R)(')",
          "end": "(')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        },
        {
          "name": "string.quoted.single.single-line.raw-regex.python",
          "match": "(r)(')((?:[^'\\\\]|\\\\.)*)(')",
          "captures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            },
            "3": {
              "patterns": [
                {
                  "include": "#constant_placeholder"
                },
                {
                  "include": "#escaped_char"
                },
                {
                  "include": "#regular_expressions"
                }
              ]
            },
            "4": {
              "name": "punctuation.definition.string.end.python"
            }
          }
        },
        {
          "name": "string.quoted.single.single-line.raw.python",
          "begin": "(R)(')",
          "end": "(')|(\\n)",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        },
        {
          "name": "string.quoted.single.single-line.unicode.python",
          "begin": "([uU])(')",
          "end": "(')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_unicode_char"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage.type.string.python"
            },
            "2": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        },
        {
          "name": "string.quoted.single.block.python",
          "begin": "(''')(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))",
          "end": "((?\u003c=''')(')''|''')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            },
            {
              "include": "source.sql"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.single.python"
            }
          }
        },
        {
          "name": "string.quoted.single.single-line.python",
          "begin": "(')(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))",
          "end": "(')|(\\n)",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            },
            {
              "include": "source.sql"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        },
        {
          "name": "string.quoted.single.block.python",
          "begin": "(''')",
          "end": "((?\u003c=''')(')''|''')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "meta.empty-string.single.python"
            }
          }
        },
        {
          "name": "string.quoted.single.single-line.python",
          "begin": "(')",
          "end": "(')",
          "patterns": [
            {
              "include": "#constant_placeholder"
            },
            {
              "include": "#escaped_char"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.python"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.python"
            },
            "2": {
              "name": "invalid.illegal.unclosed-string.python"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "include": "#string_quoted_double"
        },
        {
          "include": "#string_quoted_single"
        }
      ]
    }
  }
}
