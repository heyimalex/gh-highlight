{
  "name": "Julia",
  "scopeName": "source.julia",
  "patterns": [
    {
      "include": "#operator"
    },
    {
      "include": "#array"
    },
    {
      "include": "#string"
    },
    {
      "include": "#bracket"
    },
    {
      "include": "#function_decl"
    },
    {
      "include": "#function_call"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#number"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#type_decl"
    },
    {
      "include": "#symbol"
    }
  ],
  "repository": {
    "array": {
      "patterns": [
        {
          "name": "meta.array.julia",
          "begin": "\\[",
          "end": "\\]((\\.)?'*)",
          "patterns": [
            {
              "name": "constant.numeric.julia",
              "match": "\\bend\\b"
            },
            {
              "include": "$self"
            }
          ],
          "endCaptures": {
            "1": {
              "name": "keyword.operator.transpose.julia"
            }
          }
        }
      ]
    },
    "bracket": {
      "patterns": [
        {
          "name": "meta.bracket.julia",
          "match": "(?:\\(|\\)|\\[|\\]|\\{|\\}|,)(?!('|(?:\\.'))*\\.?')"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.number-sign-equals.julia",
          "begin": "#=",
          "end": "=#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.julia"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.julia"
            }
          }
        },
        {
          "name": "comment.line.number-sign.julia",
          "begin": "#",
          "end": "\\n",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.julia"
            }
          }
        }
      ]
    },
    "function_call": {
      "patterns": [
        {
          "begin": "([[:alpha:]_][[:word:]⁺-ₜ!′]*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?\\.?\\(",
          "end": "\\)(('|(\\.'))*\\.?')?",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.function.julia"
            },
            "2": {
              "name": "support.type.julia"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.operator.transposed-func.julia"
            }
          }
        }
      ]
    },
    "function_decl": {
      "patterns": [
        {
          "match": "([[:alpha:]_][[:word:]⁺-ₜ!′]*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?\\((?=.*\\)(::[^\\s]+)?(\\s*\\bwhere\\b\\s*[^\\s]+)?\\s*?=(?![=\u003e]))",
          "captures": {
            "1": {
              "name": "entity.name.function.julia"
            },
            "2": {
              "name": "support.type.julia"
            }
          }
        },
        {
          "match": "\\b(function|macro)\\s+(?:[[:alpha:]_][[:word:]⁺-ₜ!′]*(\\.))?([[:alpha:]_][[:word:]⁺-ₜ!′]*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?\\(",
          "captures": {
            "1": {
              "name": "keyword.other.julia"
            },
            "2": {
              "name": "keyword.operator.dots.julia"
            },
            "3": {
              "name": "entity.name.function.julia"
            },
            "4": {
              "name": "support.type.julia"
            }
          }
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.other.julia",
          "match": "\\b(?\u003c![:_])(?:function|@generated|type|immutable|mutable|struct|macro|quote|abstract|bitstype|typealias|module|baremodule|new|where)\\b"
        },
        {
          "name": "keyword.control.julia",
          "match": "\\b(?\u003c![:_])(?:if|else|elseif|while|for|begin|let|do|try|catch|finally|return|break|continue)\\b"
        },
        {
          "name": "keyword.control.end.julia",
          "match": "\\b(?\u003c![:_])end\\b"
        },
        {
          "name": "storage.modifier.variable.julia",
          "match": "\\b(?\u003c![:_])(?:global|local|const)\\b"
        },
        {
          "name": "keyword.control.export.julia",
          "match": "\\b(?\u003c![:_])(?:export)\\b"
        },
        {
          "name": "keyword.control.import.julia",
          "match": "\\b(?\u003c![:_])(?:import)\\b"
        },
        {
          "name": "keyword.control.importall.julia",
          "match": "\\b(?\u003c![:_])(?:importall)\\b"
        },
        {
          "name": "keyword.control.using.julia",
          "match": "\\b(?\u003c![:_])(?:using)\\b"
        },
        {
          "name": "support.function.macro.julia",
          "match": "(@[[:alpha:]_][[:word:]⁺-ₜ!′]*)"
        },
        {
          "name": "support.type.exception.julia",
          "match": "\\b(Argument|Assertion|Bounds|Divide|Domain|EOF|Inexact|Key|Load|Memory|Method|OutOfMemory|Overflow|Parse|StackOverflow|System|Type|UV|UndefRef|UndefVar)Error\\b"
        }
      ]
    },
    "nest_parens_and_self": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#nest_parens_and_self"
            }
          ]
        },
        {
          "include": "$self"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.julia",
          "match": "((\\b0(x|X)[0-9a-fA-F](_?[0-9a-fA-F])*)|(\\b0o[0-7](_?[0-7])*)|(\\b0b[0-1](_?[0-1])*)|((\\b[0-9](_?[0-9])*\\.?(_?[0-9]*))|(\\.[0-9](_?[0-9])*))([eE][+-]?[0-9](_?[0-9])*)?(im)?|\\bInf(32)?\\b|\\bNaN(32)?\\b)"
        },
        {
          "name": "constant.language.julia",
          "match": "\\btrue\\b|\\bfalse\\b|\\bnothing\\b"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.julia",
          "match": "(?:-\u003e|\u003c-|--\u003e|=\u003e)"
        },
        {
          "name": "keyword.operator.update.julia",
          "match": "(?::=|\\+=|-=|\\*=|//=|/=|\\.//=|\\./=|\\.\\*=|\\\\=|\\.\\\\=|\\^=|\\.\\^=|%=|\\.%=|÷=|\\.÷=|\\|=|\u0026=|\\$=|\u003c\u003c=|\u003e\u003e=|\u003e\u003e\u003e=|=(?!=))"
        },
        {
          "name": "keyword.operator.shift.julia",
          "match": "(?:\u003c\u003c|\u003e\u003e\u003e|\u003e\u003e|\\.\u003e\u003e\u003e|\\.\u003e\u003e|\\.\u003c\u003c)"
        },
        {
          "match": "(?:\\s*(::|\u003c:)\\s*((?:(?:Union)?\\([^)]*\\)|[[:alpha:]_][[:word:]⁺-ₜ!′\\.]*(?:{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?)))(?:\\.\\.\\.)?",
          "captures": {
            "1": {
              "name": "keyword.operator.relation.julia"
            },
            "2": {
              "name": "support.type.julia"
            }
          }
        },
        {
          "name": "keyword.operator.relation.julia",
          "match": "(?:===|(?\u003c=\\s)in(?=\\s)|\\.==|!==|!=|\\.\u003e=|\\.\u003e|\\.\u003c|==|\\.!=|\\.=|\\.!|\u003c:|:\u003e|(?\u003c!\u003e)\u003e=|(?\u003c!\u003c)\u003c=|\\.\u003c=|\u003e|\u003c)"
        },
        {
          "name": "keyword.operator.ternary.julia",
          "match": "(?:\\?:)"
        },
        {
          "name": "keyword.operator.boolean.julia",
          "match": "(?:\\|\\||\u0026\u0026|(?\u003c![[:word:]])!)"
        },
        {
          "name": "keyword.operator.range.julia",
          "match": "(?::)"
        },
        {
          "name": "keyword.operator.applies.julia",
          "match": "(?:\\|\u003e)"
        },
        {
          "name": "keyword.operator.bitwise.julia",
          "match": "(?:\\||\\\u0026|~)"
        },
        {
          "name": "keyword.operator.arithmetic.julia",
          "match": "(?:\\+\\+|--|\\+|\\.\\+|-|\\.\\-|\\*|\\.\\*|//(?!=)|\\.//(?!=)|/|\\./|%|\\.%|\\\\|\\.\\\\|\\^|\\.\\^)"
        },
        {
          "name": "keyword.operator.isa.julia",
          "match": "(?:::|(?\u003c=\\s)isa(?=\\s))"
        },
        {
          "name": "keyword.operator.dots.julia",
          "match": "(?:\\.(?=(?:@|_|\\p{L}))|\\.\\.+)"
        },
        {
          "name": "keyword.operator.interpolation.julia",
          "match": "(?:\\$(?=.+))"
        },
        {
          "match": "([[:alpha:]_][[:word:]⁺-ₜ!′]*)(('|(\\.'))*\\.?')",
          "captures": {
            "2": {
              "name": "keyword.operator.transposed-variable.julia"
            }
          }
        },
        {
          "match": "(\\])((?:'|(?:\\.'))*\\.?')",
          "captures": {
            "1": {
              "name": "bracket.end.julia"
            },
            "2": {
              "name": "keyword.operator.transposed-matrix.julia"
            }
          }
        },
        {
          "match": "(\\))((?:'|(?:\\.'))*\\.?')",
          "captures": {
            "1": {
              "name": "bracket.end.julia"
            },
            "2": {
              "name": "keyword.operator.transposed-parens.julia"
            }
          }
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "name": "embed.cxx.julia",
          "contentName": "source.cpp",
          "begin": "(i?cxx)(\"\"\")",
          "end": "\"\"\"",
          "patterns": [
            {
              "include": "source.c++"
            },
            {
              "include": "#string_dollar_sign_interpolate"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.function.macro.julia"
            },
            "2": {
              "name": "punctuation.definition.string.begin.julia"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.julia"
            }
          }
        },
        {
          "name": "embed.cxx.julia",
          "contentName": "source.cpp",
          "begin": "((i?cxxt?)|([rpv]cpp))(\")",
          "end": "\"",
          "patterns": [
            {
              "include": "source.c++"
            },
            {
              "include": "#string_dollar_sign_interpolate"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.function.macro.julia"
            },
            "4": {
              "name": "punctuation.definition.string.begin.julia"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.julia"
            }
          }
        },
        {
          "name": "string.docstring.julia",
          "contentName": "source.gfm",
          "begin": "^\\s?([[:alpha:]_][[:word:]⁺-ₜ!′]*)?(\"\"\")\\s?$",
          "end": "\\s?^\\s*(\"\"\")\\s?",
          "patterns": [
            {
              "include": "source.gfm"
            },
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_dollar_sign_interpolate"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.function.macro.julia"
            },
            "2": {
              "name": "punctuation.definition.string.begin.julia"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.julia"
            }
          }
        },
        {
          "name": "string.quoted.single.julia",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "include": "#string_escaped_char"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.julia"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.julia"
            }
          }
        },
        {
          "name": "string.quoted.triple.double.julia",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_dollar_sign_interpolate"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.multiline.begin.julia"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.multiline.end.julia"
            }
          }
        },
        {
          "name": "string.quoted.double.julia",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_dollar_sign_interpolate"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.julia"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.julia"
            }
          }
        },
        {
          "name": "string.regexp.julia",
          "begin": "r\"",
          "end": "(\")([imsx]{0,4})?",
          "patterns": [
            {
              "include": "#string_escaped_char"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.regexp.begin.julia"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.regexp.end.julia"
            },
            "2": {
              "name": "keyword.other.option-toggle.regexp.julia"
            }
          }
        },
        {
          "name": "string.quoted.other.julia",
          "begin": "\\b[[:alpha:]_][[:word:]⁺-ₜ!′]*\"",
          "end": "\"([[:alpha:]_][[:word:]⁺-ₜ!′]*)?",
          "patterns": [
            {
              "include": "#string_escaped_char"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.julia"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.julia"
            }
          }
        },
        {
          "name": "string.interpolated.backtick.julia",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_dollar_sign_interpolate"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.julia"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.julia"
            }
          }
        },
        {
          "name": "string.docstring.julia",
          "contentName": "source.gfm",
          "begin": "(@doc) ((?:doc)?\"\"\")",
          "end": "(\"\"\") ?(-\u003e)?",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "source.gfm"
            },
            {
              "include": "#string_dollar_sign_interpolate"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.function.macro.julia"
            },
            "2": {
              "name": "punctuation.definition.string.begin.julia"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.julia"
            },
            "2": {
              "name": "keyword.operator.arrow.julia"
            }
          }
        }
      ]
    },
    "string_dollar_sign_interpolate": {
      "patterns": [
        {
          "name": "variable.interpolation.julia",
          "match": "\\$[[:alpha:]_][[:word:]⁺-ₜ!′]*"
        },
        {
          "name": "variable.interpolation.julia",
          "begin": "\\$\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#nest_parens_and_self"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "name": "constant.character.escape.julia",
          "match": "\\\\(\\\\|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|.)"
        }
      ]
    },
    "symbol": {
      "patterns": [
        {
          "name": "constant.other.symbol.julia",
          "match": "(?\u003c![a-zA-Z0-9:\u003c]:)(?\u003c=:)[[:alpha:]_][[:word:]⁺-ₜ!′]*"
        }
      ]
    },
    "type_decl": {
      "patterns": [
        {
          "name": "meta.type.julia",
          "match": "(?\u003e!:_)(?:type|immutable|struct)\\s+([[:alpha:]_][[:word:]⁺-ₜ!′]*)(\\s*(\u003c:)\\s*[[:alpha:]_][[:word:]⁺-ₜ!′]*(?:{.*})?)?",
          "captures": {
            "1": {
              "name": "entity.name.type.julia"
            },
            "2": {
              "name": "entity.other.inherited-class.julia"
            },
            "3": {
              "name": "punctuation.separator.inheritance.julia"
            }
          }
        }
      ]
    }
  }
}
